
"""
    Operator{N}
"""
struct Operator{N} end

# Nullary Operators

"""
    tautology()
    ‚ä§()

Logical [true](https://en.wikipedia.org/wiki/Tautology_(logic)) operator.

`‚ä§` can be typed by `\\top[TAB]`.

# Examples
```jldoctest
julia> TruthTable([‚ä§])
‚îå‚îÄ‚îÄ‚îÄ‚îê
‚îÇ ‚ä§ ‚îÇ
‚îú‚îÄ‚îÄ‚îÄ‚î§
‚îÇ ‚ä§ ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îò
```
"""
const tautology = ‚ä§ = Operator{:tautology}()

"""
    contradiction()
    ‚ä•()

Logical [false](https://en.wikipedia.org/wiki/Contradiction) operator.

`‚ä•` can be typed by `\\bot[TAB]`.

# Examples
```jldoctest
julia> TruthTable([‚ä•])
‚îå‚îÄ‚îÄ‚îÄ‚îê
‚îÇ ‚ä• ‚îÇ
‚îú‚îÄ‚îÄ‚îÄ‚î§
‚îÇ ‚ä• ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îò
```
"""
const contradiction = ‚ä• = Operator{:contradiction}()

# Unary Operators

"""
    identical(p)
    ùíæ(p)

Logical [identity](https://en.wikipedia.org/wiki/Law_of_identity) operator.

# Examples
```jldoctest
julia> @atomize TruthTable([ùíæ(p)])
‚îå‚îÄ‚îÄ‚îÄ‚îê
‚îÇ p ‚îÇ
‚îú‚îÄ‚îÄ‚îÄ‚î§
‚îÇ ‚ä§ ‚îÇ
‚îÇ ‚ä• ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îò
```
"""
const identical = ùíæ = Operator{:identical}()

"""
    not(p)
    ¬¨p

Logical [negation](https://en.wikipedia.org/wiki/Negation) operator.

`¬¨` can be typed by `\\neg[TAB]`.

# Examples
```jldoctest
julia> @atomize TruthTable([¬¨p])
‚îå‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ p ‚îÇ ¬¨p ‚îÇ
‚îú‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚î§
‚îÇ ‚ä§ ‚îÇ ‚ä•  ‚îÇ
‚îÇ ‚ä• ‚îÇ ‚ä§  ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îò
```
"""
const not = ¬¨ = Operator{:not}()

# Binary Operators

"""
    and(p, q)
    p ‚àß q

Logical [conjunction](https://en.wikipedia.org/wiki/Logical_conjunction) operator.

`‚àß` can be typed by `\\wedge[TAB]`.

# Examples
```jldoctest
julia> @atomize TruthTable([p ‚àß q])
‚îå‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ p ‚îÇ q ‚îÇ p ‚àß q ‚îÇ
‚îú‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§
‚îÇ ‚ä§ ‚îÇ ‚ä§ ‚îÇ ‚ä§     ‚îÇ
‚îÇ ‚ä• ‚îÇ ‚ä§ ‚îÇ ‚ä•     ‚îÇ
‚îú‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§
‚îÇ ‚ä§ ‚îÇ ‚ä• ‚îÇ ‚ä•     ‚îÇ
‚îÇ ‚ä• ‚îÇ ‚ä• ‚îÇ ‚ä•     ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
```
"""
const and = ‚àß = Operator{:and}()

"""
    or(p, q)
    p ‚à® q

Logical [disjunction](https://en.wikipedia.org/wiki/Logical_disjunction) operator.

`‚à®` can be typed by `\\vee[TAB]`.

# Examples
```jldoctest
julia> @atomize TruthTable([p ‚à® q])
‚îå‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ p ‚îÇ q ‚îÇ p ‚à® q ‚îÇ
‚îú‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§
‚îÇ ‚ä§ ‚îÇ ‚ä§ ‚îÇ ‚ä§     ‚îÇ
‚îÇ ‚ä• ‚îÇ ‚ä§ ‚îÇ ‚ä§     ‚îÇ
‚îú‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§
‚îÇ ‚ä§ ‚îÇ ‚ä• ‚îÇ ‚ä§     ‚îÇ
‚îÇ ‚ä• ‚îÇ ‚ä• ‚îÇ ‚ä•     ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
```
"""
const or = ‚à® = Operator{:or}()

"""
    imply(p, q)
    p ‚Üí q

Logical [implication](https://en.wikipedia.org/wiki/Material_conditional) operator.

`‚Üí` can be typed by `\\rightarrow[TAB]`.

# Examples
```jldoctest
julia> @atomize TruthTable([p ‚Üí q])
‚îå‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ p ‚îÇ q ‚îÇ p ‚Üí q ‚îÇ
‚îú‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§
‚îÇ ‚ä§ ‚îÇ ‚ä§ ‚îÇ ‚ä§     ‚îÇ
‚îÇ ‚ä• ‚îÇ ‚ä§ ‚îÇ ‚ä§     ‚îÇ
‚îú‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§
‚îÇ ‚ä§ ‚îÇ ‚ä• ‚îÇ ‚ä•     ‚îÇ
‚îÇ ‚ä• ‚îÇ ‚ä• ‚îÇ ‚ä§     ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
```
"""
const imply = ‚Üí = Operator{:imply}()

"""
    exclusive_or(p, q)
    p ‚ÜÆ q

Logical [exclusive disjunction](https://en.wikipedia.org/wiki/Exclusive_or) operator.

`‚ÜÆ` can be typed by `\\nleftrightarrow[TAB]`.

# Examples
```jldoctest
julia> @atomize TruthTable([p ‚ÜÆ q])
‚îå‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ p ‚îÇ q ‚îÇ p ‚ÜÆ q ‚îÇ
‚îú‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§
‚îÇ ‚ä§ ‚îÇ ‚ä§ ‚îÇ ‚ä•     ‚îÇ
‚îÇ ‚ä• ‚îÇ ‚ä§ ‚îÇ ‚ä§     ‚îÇ
‚îú‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§
‚îÇ ‚ä§ ‚îÇ ‚ä• ‚îÇ ‚ä§     ‚îÇ
‚îÇ ‚ä• ‚îÇ ‚ä• ‚îÇ ‚ä•     ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
```
"""
const exclusive_or = ‚ÜÆ = Operator{:exclusive_or}()

"""
    converse_imply(p, q)
    p ‚Üê q

Logical [converse implication](https://en.wikipedia.org/wiki/Converse_(logic)#Implicational_converse) operator.

`‚Üê` can be typed by `\\leftarrow[TAB]`.

# Examples
```jldoctest
julia> @atomize TruthTable([p ‚Üê q])
‚îå‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ p ‚îÇ q ‚îÇ p ‚Üê q ‚îÇ
‚îú‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§
‚îÇ ‚ä§ ‚îÇ ‚ä§ ‚îÇ ‚ä§     ‚îÇ
‚îÇ ‚ä• ‚îÇ ‚ä§ ‚îÇ ‚ä•     ‚îÇ
‚îú‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§
‚îÇ ‚ä§ ‚îÇ ‚ä• ‚îÇ ‚ä§     ‚îÇ
‚îÇ ‚ä• ‚îÇ ‚ä• ‚îÇ ‚ä§     ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
```
"""
const converse_imply = ‚Üê = Operator{:converse_imply}()

"""
    not_and(p, q)
    p ‚Üë q

Logical [non-conjunction](https://en.wikipedia.org/wiki/Sheffer_stroke) operator.

`‚Üë` can be typed by `\\uparrow[TAB]`.

# Examples
```jldoctest
julia> @atomize TruthTable([p ‚Üë q])
‚îå‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ p ‚îÇ q ‚îÇ p ‚Üë q ‚îÇ
‚îú‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§
‚îÇ ‚ä§ ‚îÇ ‚ä§ ‚îÇ ‚ä•     ‚îÇ
‚îÇ ‚ä• ‚îÇ ‚ä§ ‚îÇ ‚ä§     ‚îÇ
‚îú‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§
‚îÇ ‚ä§ ‚îÇ ‚ä• ‚îÇ ‚ä§     ‚îÇ
‚îÇ ‚ä• ‚îÇ ‚ä• ‚îÇ ‚ä§     ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
```
"""
const not_and = ‚Üë = Operator{:not_and}()

"""
    not_or(p, q)
    p ‚Üì q

Logical [non-disjunction](https://en.wikipedia.org/wiki/Logical_NOR) operator.

`‚Üì` can be typed by `\\downarrow[TAB]`.

# Examples
```jldoctest
julia> @atomize TruthTable([p ‚Üì q])
‚îå‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ p ‚îÇ q ‚îÇ p ‚Üì q ‚îÇ
‚îú‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§
‚îÇ ‚ä§ ‚îÇ ‚ä§ ‚îÇ ‚ä•     ‚îÇ
‚îÇ ‚ä• ‚îÇ ‚ä§ ‚îÇ ‚ä•     ‚îÇ
‚îú‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§
‚îÇ ‚ä§ ‚îÇ ‚ä• ‚îÇ ‚ä•     ‚îÇ
‚îÇ ‚ä• ‚îÇ ‚ä• ‚îÇ ‚ä§     ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
```
"""
const not_or = ‚Üì = Operator{:not_or}()

"""
    not_exclusive_or(p, q)
    p ‚Üî q

Logical [exclusive non-disjunction]
(https://en.wikipedia.org/wiki/Logical_biconditional) operator.

`‚Üî` can be typed by `\\leftrightarrow[TAB]`.

# Examples
```jldoctest
julia> @atomize TruthTable([p ‚Üî q])
‚îå‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ p ‚îÇ q ‚îÇ p ‚Üî q ‚îÇ
‚îú‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§
‚îÇ ‚ä§ ‚îÇ ‚ä§ ‚îÇ ‚ä§     ‚îÇ
‚îÇ ‚ä• ‚îÇ ‚ä§ ‚îÇ ‚ä•     ‚îÇ
‚îú‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§
‚îÇ ‚ä§ ‚îÇ ‚ä• ‚îÇ ‚ä•     ‚îÇ
‚îÇ ‚ä• ‚îÇ ‚ä• ‚îÇ ‚ä§     ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
```
"""
const not_exclusive_or = ‚Üî = Operator{:not_exclusive_or}()

"""
    not_imply(p, q)
    p ‚Üõ q

Logical [non-implication](https://en.wikipedia.org/wiki/Material_nonimplication) operator.

`‚Üõ` can be typed by `\\nrightarrow[TAB]`.

# Examples
```jldoctest
julia> @atomize TruthTable([p ‚Üõ q])
‚îå‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ p ‚îÇ q ‚îÇ p ‚Üõ q ‚îÇ
‚îú‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§
‚îÇ ‚ä§ ‚îÇ ‚ä§ ‚îÇ ‚ä•     ‚îÇ
‚îÇ ‚ä• ‚îÇ ‚ä§ ‚îÇ ‚ä•     ‚îÇ
‚îú‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§
‚îÇ ‚ä§ ‚îÇ ‚ä• ‚îÇ ‚ä§     ‚îÇ
‚îÇ ‚ä• ‚îÇ ‚ä• ‚îÇ ‚ä•     ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
```
"""
const not_imply = ‚Üõ = Operator{:not_imply}()

"""
    not_converse_imply(p, q)
    p ‚Üö q

Logical [converse non-implication](https://en.wikipedia.org/wiki/Converse_nonimplication) operator.

`‚Üö` can be typed by `\\nleftarrow[TAB]`.

# Examples
```jldoctest
julia> @atomize TruthTable([p ‚Üö q])
‚îå‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ p ‚îÇ q ‚îÇ p ‚Üö q ‚îÇ
‚îú‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§
‚îÇ ‚ä§ ‚îÇ ‚ä§ ‚îÇ ‚ä•     ‚îÇ
‚îÇ ‚ä• ‚îÇ ‚ä§ ‚îÇ ‚ä§     ‚îÇ
‚îú‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§
‚îÇ ‚ä§ ‚îÇ ‚ä• ‚îÇ ‚ä•     ‚îÇ
‚îÇ ‚ä• ‚îÇ ‚ä• ‚îÇ ‚ä•     ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
```
"""
const not_converse_imply = ‚Üö = Operator{:not_converse_imply}()

# Nary Operators

"""
    conjunction(ps)
    ‚ãÄ(ps)

Equivalent to `something(foldl(‚àß, ps; init = Some(‚ä§)))`.

`‚ãÄ` can be typed by `\\bigwedge[TAB]`.

See also [`and`](@ref) and [`tautology`](@ref).

# Examples
```jldoctest
julia> @atomize ‚ãÄ((p, q, r, s))
((p ‚àß q) ‚àß r) ‚àß s
```
"""
conjunction(ps) = fold(ùíæ, (‚àß) => ps)
const ‚ãÄ = conjunction

"""
    disjunction(ps)
    ‚ãÅ(ps)

Equivalent to `something(foldl(‚à®, ps; init = Some(‚ä•)))`.

`‚ãÅ` can be typed by `\\bigvee[TAB]`.

See also [`or`](@ref) and [`contradiction`](@ref).

# Examples
```jldoctest
julia> @atomize ‚ãÅ((p, q, r, s))
((p ‚à® q) ‚à® r) ‚à® s
```
"""
disjunction(ps) = fold(ùíæ, (‚à®) => ps)
const ‚ãÅ = disjunction

# Internals

"""
    FoldDirection(::Operator)

A trait to indicate which direction to fold a binary operator.

Supertype of [`Left`](@ref) and [`Right`](@ref).
See also [`Operator`](@ref).

# Examples
```jldoctest
julia> PAndQ.FoldDirection(‚Üí)
PAndQ.Left()

julia> PAndQ.FoldDirection(‚Üê)
PAndQ.Right()
```
"""
abstract type FoldDirection end

"""
    Left <: FoldDirection

A trait to indicate that a binary operator should fold left.

Subtype of [`FoldDirection`](@ref).
"""
struct Left <: FoldDirection end
FoldDirection(::union_typeof((‚àß, ‚Üë, ‚Üì, ‚à®, ‚ÜÆ, ‚Üî, ‚Üí, ‚Üö))) = Left()

"""
    Right <: FoldDirection

A trait to indicate that a binary operator should fold right.

Subtype of [`FoldDirection`](@ref).
"""
struct Right <: FoldDirection end
FoldDirection(::union_typeof((‚Üõ, ‚Üê))) = Right()

"""
    InitialValue(::Operator)

A trait to indicate whether a binary operator has an initial value.

Supertype of [`HasInitialValue`](@ref) and [`NoInitialValue`](@ref).
See also [`Operator`](@ref).

# Examples
```jldoctest
julia> PAndQ.InitialValue(‚àß)
PAndQ.HasInitialValue()

julia> PAndQ.InitialValue(‚Üë)
PAndQ.NoInitialValue()
```
"""
abstract type InitialValue end

"""
    HasInitialValue <: InitialValue

A trait to indicate that a binary operator has an initial value.

Subtype of [`InitialValue`](@ref).
"""
struct HasInitialValue <: InitialValue end
InitialValue(::union_typeof((‚àß, ‚à®, ‚ÜÆ, ‚Üî, ‚Üí, ‚Üõ, ‚Üê, ‚Üö))) = HasInitialValue()

"""
    NoInitialValue <: InitialValue

A trait to indicate that a binary operator does not have a neutral element.

Subtype of [`InitialValue`](@ref).
"""
struct NoInitialValue <: InitialValue end
InitialValue(::union_typeof((‚Üë, ‚Üì))) = NoInitialValue()

"""
    initial_value(::Operator)

See also [`Operator`](@ref).

# Examples
```jldoctest
julia> PAndQ.initial_value(‚àß)
‚ä§

julia> PAndQ.initial_value(‚à®)
‚ä•
```
"""
initial_value(::union_typeof((‚àß, ‚Üî, ‚Üí, ‚Üê))) = ‚ä§
initial_value(::union_typeof((‚à®, ‚ÜÆ, ‚Üö, ‚Üõ))) = ‚ä•

## Union Types

"""
    NullaryOperator

The `Union` of [Nullary Operators](@ref nullary_operators).
"""
const NullaryOperator = union_typeof((‚ä§, ‚ä•))

"""
    UnaryOperator

The `Union` of [Unary Operators](@ref unary_operators).
"""
const UnaryOperator = union_typeof((ùíæ, ¬¨))

"""
    BinaryOperator

The `Union` of [Binary Operators](@ref binary_operators).
"""
const BinaryOperator = union_typeof((‚àß, ‚Üë, ‚Üì, ‚à®, ‚ÜÆ, ‚Üî, ‚Üí, ‚Üõ, ‚Üê, ‚Üö))

"""
    NaryOperator

The `Union` of [Nary Operators](@ref nary_operators).
"""
const NaryOperator = union_typeof((‚ãÄ, ‚ãÅ))

"""
    AndOr

The `Union` of [`and`](@ref) and [`or`](@ref).
"""
const AndOr = union_typeof((‚àß, ‚à®))

# Utilities

____fold(::Left) = mapfoldl
____fold(::Right) = mapfoldr

___fold(::NoInitialValue, mapfold, f, operator, xs) = mapfold(f, operator, xs)
function ___fold(::HasInitialValue, mapfold, f, operator, xs)
    _initial_value = initial_value(operator)
    isempty(xs) ? _initial_value : mapfold(f, operator, xs)
end

__fold(f, operator, xs) = g -> (args...) -> ___fold(InitialValue(operator),
    ____fold(FoldDirection(operator)), x -> f(g)(args..., x), operator, xs)

_fold() = ùíæ
_fold((operator, xs)) = __fold(ùíæ, operator, xs)
_fold((operator, xs), pairs...) = __fold(_fold(pairs...), operator, xs)

"""
    fold(f, pairs...)

A generalization of `mapreduce` with an arbitrary number of nested folds
and traits to determine the [`FoldDirection`](@ref) and [`InitialValue`](@ref).

The function `f` must accept as many arguments as there are `pairs`.
Each pair must be an two element iterable where the first element is a
binary operator and the second element is an iterable.

Given a single pair, this function is similar to `mapreduce` and other related functions.
Giving additional pairs will generalize the following pattern:

```julia
mapreduce(a, xs) do x
    mapreduce(b, ys) do y
        ...
    end
end
```

This can be rewritten as:

```julia
fold(a => xs, b => ys, ...) do (x, y, ...)
    ...
end
```

# Examples
```jldoctest
julia> fold(‚ä§)
‚ä§

julia> @atomize fold(¬¨, (‚àß) => (p, q))
¬¨p ‚àß ¬¨q

julia> @atomize fold(‚Üî, (‚àß) => (p, q), (‚à®) => (r, s))
((p ‚Üî r) ‚à® (p ‚Üî s)) ‚àß ((q ‚Üî r) ‚à® (q ‚Üî s))
```
"""
fold(f::Union{Function, Operator}, pairs::Pair...) = _fold(pairs...)(f)()
fold(pair) = fold(ùíæ, pair)

"""
    arity(operator)

Return the [arity](https://en.wikipedia.org/wiki/Arity)
of the given [operator](@ref operators_operators).

# Examples
```jldoctest
julia> arity(‚ä§)
0

julia> arity(¬¨)
1

julia> arity(‚àß)
2

julia> arity(‚ãÄ)
Inf
```
"""
arity(::NullaryOperator) = 0
arity(::UnaryOperator) = 1
arity(::BinaryOperator) = 2
arity(::NaryOperator) = Inf
