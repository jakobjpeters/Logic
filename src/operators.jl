
import Base: Fix1, nand, nor, xor, ‚äª, ‚äº, ‚äΩ

# Nullary Operators

"""
    tautology()
    ‚ä§()

Logical [true](https://en.wikipedia.org/wiki/Tautology_(logic)) operator.

`‚ä§` can be typed by `\\top[TAB]`.

# Examples
```jldoctest
julia> TruthTable([‚ä§])
‚îå‚îÄ‚îÄ‚îÄ‚îê
‚îÇ ‚ä§ ‚îÇ
‚îú‚îÄ‚îÄ‚îÄ‚î§
‚îÇ ‚ä§ ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îò
```
"""
function tautology end
const ‚ä§ = tautology

"""
    contradiction()
    ‚ä•()

Logical [false](https://en.wikipedia.org/wiki/Contradiction) operator.

`‚ä•` can be typed by `\\bot[TAB]`.

# Examples
```jldoctest
julia> TruthTable([‚ä•])
‚îå‚îÄ‚îÄ‚îÄ‚îê
‚îÇ ‚ä• ‚îÇ
‚îú‚îÄ‚îÄ‚îÄ‚î§
‚îÇ ‚ä• ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îò
```
"""
function contradiction end
const ‚ä• = contradiction

# Unary Operators

"""
    identity(p)
    ùíæ(p)

Logical [identity](https://en.wikipedia.org/wiki/Law_of_identity) operator.

# Examples
```jldoctest
julia> @atomize TruthTable([ùíæ(p)])
‚îå‚îÄ‚îÄ‚îÄ‚îê
‚îÇ p ‚îÇ
‚îú‚îÄ‚îÄ‚îÄ‚î§
‚îÇ ‚ä§ ‚îÇ
‚îÇ ‚ä• ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îò
```
"""
identity
const ùíæ = identity

"""
    not(p)
    ¬¨p

Logical [negation](https://en.wikipedia.org/wiki/Negation) operator.

`¬¨` can be typed by `\\neg[TAB]`.

# Examples
```jldoctest
julia> @atomize TruthTable([¬¨p])
‚îå‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ p ‚îÇ ¬¨p ‚îÇ
‚îú‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚î§
‚îÇ ‚ä§ ‚îÇ ‚ä•  ‚îÇ
‚îÇ ‚ä• ‚îÇ ‚ä§  ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îò
```
"""
function not end
const ¬¨ = not

# Binary Operators

"""
    and(p, q)
    p ‚àß q

Logical [conjunction](https://en.wikipedia.org/wiki/Logical_conjunction) operator.

`‚àß` can be typed by `\\wedge[TAB]`.

# Examples
```jldoctest
julia> @atomize TruthTable([p ‚àß q])
‚îå‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ p ‚îÇ q ‚îÇ p ‚àß q ‚îÇ
‚îú‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§
‚îÇ ‚ä§ ‚îÇ ‚ä§ ‚îÇ ‚ä§     ‚îÇ
‚îÇ ‚ä• ‚îÇ ‚ä§ ‚îÇ ‚ä•     ‚îÇ
‚îú‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§
‚îÇ ‚ä§ ‚îÇ ‚ä• ‚îÇ ‚ä•     ‚îÇ
‚îÇ ‚ä• ‚îÇ ‚ä• ‚îÇ ‚ä•     ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
```
"""
function and end
const ‚àß = and

"""
    nand(p, q)
    p ‚äº q

Logical [non-conjunction](https://en.wikipedia.org/wiki/Sheffer_stroke) operator.

`‚äº` can be typed by `\\nand[TAB]`.

# Examples
```jldoctest
julia> @atomize TruthTable([p ‚äº q])
‚îå‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ p ‚îÇ q ‚îÇ p ‚äº q ‚îÇ
‚îú‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§
‚îÇ ‚ä§ ‚îÇ ‚ä§ ‚îÇ ‚ä•     ‚îÇ
‚îÇ ‚ä• ‚îÇ ‚ä§ ‚îÇ ‚ä§     ‚îÇ
‚îú‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§
‚îÇ ‚ä§ ‚îÇ ‚ä• ‚îÇ ‚ä§     ‚îÇ
‚îÇ ‚ä• ‚îÇ ‚ä• ‚îÇ ‚ä§     ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
```
"""
nand

"""
    nor(p, q)
    p ‚äΩ q

Logical [non-disjunction](https://en.wikipedia.org/wiki/Logical_NOR) operator.

`‚äΩ` can be typed by `\\nor[TAB]`.

# Examples
```jldoctest
julia> @atomize TruthTable([p ‚äΩ q])
‚îå‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ p ‚îÇ q ‚îÇ p ‚äΩ q ‚îÇ
‚îú‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§
‚îÇ ‚ä§ ‚îÇ ‚ä§ ‚îÇ ‚ä•     ‚îÇ
‚îÇ ‚ä• ‚îÇ ‚ä§ ‚îÇ ‚ä•     ‚îÇ
‚îú‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§
‚îÇ ‚ä§ ‚îÇ ‚ä• ‚îÇ ‚ä•     ‚îÇ
‚îÇ ‚ä• ‚îÇ ‚ä• ‚îÇ ‚ä§     ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
```
"""
nor

"""
    or(p, q)
    p ‚à® q

Logical [disjunction](https://en.wikipedia.org/wiki/Logical_disjunction) operator.

`‚à®` can be typed by `\\vee[TAB]`.

# Examples
```jldoctest
julia> @atomize TruthTable([p ‚à® q])
‚îå‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ p ‚îÇ q ‚îÇ p ‚à® q ‚îÇ
‚îú‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§
‚îÇ ‚ä§ ‚îÇ ‚ä§ ‚îÇ ‚ä§     ‚îÇ
‚îÇ ‚ä• ‚îÇ ‚ä§ ‚îÇ ‚ä§     ‚îÇ
‚îú‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§
‚îÇ ‚ä§ ‚îÇ ‚ä• ‚îÇ ‚ä§     ‚îÇ
‚îÇ ‚ä• ‚îÇ ‚ä• ‚îÇ ‚ä•     ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
```
"""
function or end
const ‚à® = or

"""
    xor(p, q)
    p ‚äª q

Logical [exclusive disjunction](https://en.wikipedia.org/wiki/Exclusive_or) operator.

`‚äª` can be typed by `\\xor[TAB]`.

# Examples
```jldoctest
julia> @atomize TruthTable([p ‚äª q])
‚îå‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ p ‚îÇ q ‚îÇ p ‚äª q ‚îÇ
‚îú‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§
‚îÇ ‚ä§ ‚îÇ ‚ä§ ‚îÇ ‚ä•     ‚îÇ
‚îÇ ‚ä• ‚îÇ ‚ä§ ‚îÇ ‚ä§     ‚îÇ
‚îú‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§
‚îÇ ‚ä§ ‚îÇ ‚ä• ‚îÇ ‚ä§     ‚îÇ
‚îÇ ‚ä• ‚îÇ ‚ä• ‚îÇ ‚ä•     ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
```
"""
xor

"""
    xnor(p, q)
    p ‚Üî q

Logical [exclusive non-disjunction]
(https://en.wikipedia.org/wiki/Logical_biconditional) operator.

`‚Üî` can be typed by `\\leftrightarrow[TAB]`.

# Examples
```jldoctest
julia> @atomize TruthTable([p ‚Üî q])
‚îå‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ p ‚îÇ q ‚îÇ p ‚Üî q ‚îÇ
‚îú‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§
‚îÇ ‚ä§ ‚îÇ ‚ä§ ‚îÇ ‚ä§     ‚îÇ
‚îÇ ‚ä• ‚îÇ ‚ä§ ‚îÇ ‚ä•     ‚îÇ
‚îú‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§
‚îÇ ‚ä§ ‚îÇ ‚ä• ‚îÇ ‚ä•     ‚îÇ
‚îÇ ‚ä• ‚îÇ ‚ä• ‚îÇ ‚ä§     ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
```
"""
function xnor end
const ‚Üî = xnor

"""
    not_imply(p, q)
    p ‚Üõ q

Logical [non-implication](https://en.wikipedia.org/wiki/Material_nonimplication) operator.

`‚Üõ` can be typed by `\\nrightarrow[TAB]`.

# Examples
```jldoctest
julia> @atomize TruthTable([p ‚Üõ q])
‚îå‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ p ‚îÇ q ‚îÇ p ‚Üõ q ‚îÇ
‚îú‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§
‚îÇ ‚ä§ ‚îÇ ‚ä§ ‚îÇ ‚ä•     ‚îÇ
‚îÇ ‚ä• ‚îÇ ‚ä§ ‚îÇ ‚ä•     ‚îÇ
‚îú‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§
‚îÇ ‚ä§ ‚îÇ ‚ä• ‚îÇ ‚ä§     ‚îÇ
‚îÇ ‚ä• ‚îÇ ‚ä• ‚îÇ ‚ä•     ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
```
"""
function not_imply end
const ‚Üõ = not_imply

"""
    imply(p, q)
    p ‚Üí q

Logical [implication](https://en.wikipedia.org/wiki/Material_conditional) operator.

`‚Üí` can be typed by `\\rightarrow[TAB]`.

# Examples
```jldoctest
julia> @atomize TruthTable([p ‚Üí q])
‚îå‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ p ‚îÇ q ‚îÇ p ‚Üí q ‚îÇ
‚îú‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§
‚îÇ ‚ä§ ‚îÇ ‚ä§ ‚îÇ ‚ä§     ‚îÇ
‚îÇ ‚ä• ‚îÇ ‚ä§ ‚îÇ ‚ä§     ‚îÇ
‚îú‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§
‚îÇ ‚ä§ ‚îÇ ‚ä• ‚îÇ ‚ä•     ‚îÇ
‚îÇ ‚ä• ‚îÇ ‚ä• ‚îÇ ‚ä§     ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
```
"""
function imply end
const ‚Üí = imply

"""
    not_converse_imply(p, q)
    p ‚Üö q

Logical [converse non-implication](https://en.wikipedia.org/wiki/Converse_nonimplication) operator.

`‚Üö` can be typed by `\\nleftarrow[TAB]`.

# Examples
```jldoctest
julia> @atomize TruthTable([p ‚Üö q])
‚îå‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ p ‚îÇ q ‚îÇ p ‚Üö q ‚îÇ
‚îú‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§
‚îÇ ‚ä§ ‚îÇ ‚ä§ ‚îÇ ‚ä•     ‚îÇ
‚îÇ ‚ä• ‚îÇ ‚ä§ ‚îÇ ‚ä§     ‚îÇ
‚îú‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§
‚îÇ ‚ä§ ‚îÇ ‚ä• ‚îÇ ‚ä•     ‚îÇ
‚îÇ ‚ä• ‚îÇ ‚ä• ‚îÇ ‚ä•     ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
```
"""
function not_converse_imply end
const ‚Üö = not_converse_imply

"""
    converse_imply(p, q)
    p ‚Üê q

Logical [converse implication](https://en.wikipedia.org/wiki/Converse_(logic)#Implicational_converse) operator.

`‚Üê` can be typed by `\\leftarrow[TAB]`.

# Examples
```jldoctest
julia> @atomize TruthTable([p ‚Üê q])
‚îå‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ p ‚îÇ q ‚îÇ p ‚Üê q ‚îÇ
‚îú‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§
‚îÇ ‚ä§ ‚îÇ ‚ä§ ‚îÇ ‚ä§     ‚îÇ
‚îÇ ‚ä• ‚îÇ ‚ä§ ‚îÇ ‚ä•     ‚îÇ
‚îú‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§
‚îÇ ‚ä§ ‚îÇ ‚ä• ‚îÇ ‚ä§     ‚îÇ
‚îÇ ‚ä• ‚îÇ ‚ä• ‚îÇ ‚ä§     ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
```
"""
function converse_imply end
const ‚Üê = converse_imply

# Nary Operators

"""
    conjunction(ps)
    ‚ãÄ(ps)

Equivalent to `something(foldl(‚àß, ps; init = Some(‚ä§)))`.

`‚ãÄ` can be typed by `\\bigwedge[TAB]`.

See also [`and`](@ref) and [`tautology`](@ref).

# Examples
```jldoctest
julia> @atomize ‚ãÄ((p, q, r, s))
((p ‚àß q) ‚àß r) ‚àß s
```
"""
conjunction(ps) = fold(‚àß, ps)
const ‚ãÄ = conjunction

"""
    disjunction(ps)
    ‚ãÅ(ps)

Equivalent to `something(foldl(‚à®, ps; init = Some(‚ä•)))`.

`‚ãÅ` can be typed by `\\bigvee[TAB]`.

See also [`or`](@ref) and [`contradiction`](@ref).

# Examples
```jldoctest
julia> @atomize ‚ãÅ((p, q, r, s))
((¬¨¬¨p ‚à® q) ‚à® r) ‚à® s
```
"""
disjunction(ps) = fold(‚à®, ps)
const ‚ãÅ = disjunction

# Internals

"""
    FoldDirection(::Operator)

A trait to indicate which direction to fold a binary operator.

Supertype of [`Left`](@ref) and [`Right`](@ref).
See also [`Operator`](@ref).

# Examples
```jldoctest
julia> PAndQ.FoldDirection(‚Üí)
PAndQ.Left()

julia> PAndQ.FoldDirection(‚Üê)
PAndQ.Right()
```
"""
abstract type FoldDirection end

"""
    Left <: FoldDirection

A trait to indicate that a binary operator should fold left.

Subtype of [`FoldDirection`](@ref).
"""
struct Left <: FoldDirection end
FoldDirection(::union_typeof((‚àß, ‚äº, ‚äΩ, ‚à®, ‚äª, ‚Üî, ‚Üí, ‚Üö))) = Left()

"""
    Right <: FoldDirection

A trait to indicate that a binary operator should fold right.

Subtype of [`FoldDirection`](@ref).
"""
struct Right <: FoldDirection end
FoldDirection(::union_typeof((‚Üõ, ‚Üê))) = Right()

"""
    InitialValue(::Operator)

A trait to indicate whether a binary operator has an initial value.

Supertype of [`HasInitialValue`](@ref) and [`NoInitialValue`](@ref).
See also [`Operator`](@ref).

# Examples
```jldoctest
julia> PAndQ.InitialValue(‚àß)
PAndQ.HasInitialValue()

julia> PAndQ.InitialValue(‚äº)
PAndQ.NoInitialValue()
```
"""
abstract type InitialValue end

"""
    HasInitialValue <: InitialValue

A trait to indicate that a binary operator has an initial value.

Subtype of [`InitialValue`](@ref).
"""
struct HasInitialValue <: InitialValue end
InitialValue(::union_typeof((‚àß, ‚à®, ‚äª, ‚Üî, ‚Üí, ‚Üõ, ‚Üê, ‚Üö))) = HasInitialValue()

"""
    NoInitialValue <: InitialValue

A trait to indicate that a binary operator does not have a neutral element.

Subtype of [`InitialValue`](@ref).
"""
struct NoInitialValue <: InitialValue end
InitialValue(::union_typeof((‚äº, ‚äΩ))) = NoInitialValue()

"""
    initial_value(::Operator)

See also [`Operator`](@ref).

# Examples
```jldoctest
julia> PAndQ.initial_value(‚àß)
Some(PAndQ.tautology)

julia> PAndQ.initial_value(‚à®)
Some(PAndQ.contradiction)
```
"""
initial_value(::union_typeof((‚àß, ‚Üî, ‚Üí, ‚Üê))) = Some(‚ä§)
initial_value(::union_typeof((‚à®, ‚äª, ‚Üö, ‚Üõ))) = Some(‚ä•)

## Union Types

"""
    NullaryOperator

The `Union` of [Nullary Operators](@ref nullary_operators).
"""
const NullaryOperator = union_typeof((‚ä§, ‚ä•))

"""
    UnaryOperator

The `Union` of [Unary Operators](@ref unary_operators).
"""
const UnaryOperator = union_typeof((ùíæ, ¬¨))

"""
    BinaryOperator

The `Union` of [Binary Operators](@ref binary_operators).
"""
const BinaryOperator = union_typeof((‚àß, ‚äº, ‚äΩ, ‚à®, ‚äª, ‚Üî, ‚Üí, ‚Üõ, ‚Üê, ‚Üö))

"""
    NaryOperator

The `Union` of [Nary Operators](@ref nary_operators).
"""
const NaryOperator = union_typeof((‚ãÄ, ‚ãÅ))

"""
    Operator

The `Union` of [Operators](@ref operators_operators).
"""
const Operator = Union{NullaryOperator, UnaryOperator, BinaryOperator, NaryOperator}

"""
    AndOr

The `Union` of [`and`](@ref) and [`or`](@ref).
"""
const AndOr = union_typeof((‚àß, ‚à®))

# Folds

__map_fold(::Left) = mapfoldl
__map_fold(::Right) = mapfoldr

_map_fold(::NoInitialValue, ::FoldDirection, mapfold, f, operator, xs) = mapfold(f, operator, xs)
_map_fold(::HasInitialValue, fold_direction, mapfold, f, operator, xs) =
    something(mapfold(f, operator, xs; init = initial_value(operator)))

"""
    map_fold(f, operator, xs)

Similar to `mapreduce`, but with the fold direction and initial values determined by the
[`FoldDirection`](@ref) and [`InitialValue`](@ref) traits.

# Examples
```jldoctest
julia> map_fold(¬¨, ‚àß, ())
tautology (generic function with 1 method)

julia> @atomize map_fold(¬¨, ‚àß, (p, q))
¬¨p ‚àß ¬¨q
```
"""
function map_fold(f, operator, xs)
    fold_direction = FoldDirection(operator)
    _map_fold(InitialValue(operator), fold_direction, __map_fold(fold_direction), f, operator, xs)
end

__map_folds(f, operator, xs) = g -> (args...) -> map_fold(x -> f(g)(args..., x), operator, xs)

_map_folds() = ùíæ
_map_folds((operator, xs)) = __map_folds(ùíæ, operator, xs)
_map_folds((operator, xs), pairs...) = __map_folds(_map_folds(pairs...), operator, xs)

"""
    map_folds(f, pairs...)

Similar to [`map_fold`](@ref), but with an arbitrary number of nested folds.

The function `f` must accept as many arguments as there are `pairs`.
Each pair must be a two element iterable where the first element is a
binary operator and the second element is an iterable.

The purpose of this function is to simplify the following pattern:

```julia
mapreduce(a, xs) do x
    mapreduce(b, ys) do y
        ...
            f(x, y, zs...)
        ...
    end
end
```

This can be rewritten as:

```julia
map_folds(a => xs, b => ys, ...) do (x, y, zs...)
    f(x, y, zs...)
end
```

Using `do` notation corresponds to mathematical syntax. For example:

```math
\\bigwedge\\limits_{i = 1}^n \\bigvee\\limits_{j = 1}^m f(i, j)
```

# Examples
```jldoctest
julia> map_folds(‚ä§)
tautology (generic function with 1 method)

julia> @atomize map_folds(i -> \$i, (‚àß) => 1:2)
\$(1) ‚àß \$(2)

julia> @atomize map_folds((i, j) -> \$(i, j), (‚àß) => 1:2, (‚à®) => 1:2)
(¬¨¬¨\$((1, 1)) ‚à® \$((1, 2))) ‚àß (¬¨¬¨\$((2, 1)) ‚à® \$((2, 2)))
```
"""
map_folds(f, pairs...) = _map_folds(pairs...)(f)()

"""
    fold(operator, ps)

Equivalent to `map_fold(ùíæ, ps)`.

See also [`identity`](@ref) and [`map_fold`](@ref).

# Examples
```jldoctest
julia> fold(‚àß, ())
tautology (generic function with 1 method)

julia> @atomize fold(‚àß, (p, q))
p ‚àß q
```
"""
fold(operator, ps) = map_fold(ùíæ, operator, ps)

# Utilities

"""
    arity(operator)

Return the [arity](https://en.wikipedia.org/wiki/Arity)
of the given [operator](@ref operators_operators).

# Examples
```jldoctest
julia> arity(‚ä§)
0

julia> arity(¬¨)
1

julia> arity(‚àß)
2

julia> arity(‚ãÄ)
Inf
```
"""
arity(::NullaryOperator) = 0
arity(::UnaryOperator) = 1
arity(::BinaryOperator) = 2
arity(::NaryOperator) = Inf
