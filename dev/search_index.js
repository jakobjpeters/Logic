var documenterSearchIndex = {"docs":
[{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"DocTestSetup = :(using PAndQ)","category":"page"},{"location":"tutorial/#Tutorial","page":"Tutorial","title":"Tutorial","text":"","category":"section"},{"location":"tutorial/#Truth-Values","page":"Tutorial","title":"Truth Values","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"A truth value is logic's version of a boolean true or false. These concepts can also be represented as a 1 or a 0. Similarly, we use tautology and contradiction. These are commonly represented with the symbols ⊤ and ⊥. These truth values have additional meaning, which will be discussed further on.","category":"page"},{"location":"tutorial/#tutorial_operators","page":"Tutorial","title":"Operators","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Just like with boolean values, we can perform operations on truth values. Both ! and the symbol ¬ represent the unary operator not.","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"julia> !true == false # boolean negation\ntrue\n\njulia> ¬⊤ == ⊥ # logical negation\ntrue","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"There are several operators that accept multiple arguments. Both && and the symbol ∧ represent the binary operator and. Both || and the symbol ∨ represent the binary operator or.","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"julia> true && false == false # boolean and\ntrue\n\njulia> true || false == true # boolean or\ntrue\n\njulia> ⊤ ∧ ⊥ == ⊥ # logical and\ntrue\n\njulia> ⊤ ∨ ⊥ == ⊤ # logical or\ntrue","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"There are several more operators, which will be discussed later. Use the arity function to determine the number of arguments for an operator.","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"julia> arity(contradiction)\n0\n\njulia> arity(not)\n1\n\njulia> arity(and)\n2","category":"page"},{"location":"tutorial/#Propositions","page":"Tutorial","title":"Propositions","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"A Proposition is a statement that can be either true or false. For example, \"Logic is fun\" is a proposition because it may be true for you but false for someone else. This proposition has a known value, so it is a Constant. Note that the proposition exists independently of whether it is known to be true or false.","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"julia> p = Constant(\"Logic is fun\")\n$(\"Logic is fun\")\n\njulia> q = Constant(\"Julia is awesome\")\n$(\"Julia is awesome\")","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"We can also perform operations on propositions. In a written form, we can negate the above proposition by saying \"Logic is not fun\". We could combine two propositions using another operator, such as \"Logic is fun and Julia is awesome\".","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"julia> ¬p\n¬$(\"Logic is fun\")\n\njulia> p ∧ q\n$(\"Logic is fun\") ∧ $(\"Julia is awesome\")","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"In mathematics, it's useful to replace individual numbers with a symbolic Variable that can represent an unknown value. Since these atoms are for demonstration and represent an unknown value, we will do the same with our propositions p and q.","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"julia> p = Variable(:p)\np\n\njulia> q = Variable(:q)\nq\n\njulia> ¬p\n¬p\n\njulia> p ∧ q\np ∧ q","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Propositions that do not contain any structure are called Atomic. Constants and Variables are Atomic propositions. Compound propositions are formed by connecting atomic propositions with logical operators. A Literal is a proposition that is either an atom or its negation. Since propositions can be nested arbitrarily, a Tree structure can be used to represent them.","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"julia> p isa Atom\ntrue\n\njulia> ¬p isa Literal && ¬p isa Compound\ntrue\n\njulia> p ∧ q isa Tree && p ∧ q isa Compound\ntrue","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"The function atoms returns an iterator of each Atom in a proposition.","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"julia> collect(atoms(¬p))\n1-element Vector{Variable}:\n p\n\njulia> collect(atoms(p ∧ q))\n2-element Vector{Variable}:\n p\n q","category":"page"},{"location":"tutorial/#Semantics","page":"Tutorial","title":"Semantics","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"We know that since these are propositions, they can be true or false. If you think that \"Logic is fun\", it would be invalid to assign it the valuation false. So the proposition p is true if you think that \"Logic is fun\" and is false otherwise. If we assign the value true to the proposition \"Logic is fun\", then we know that the validity of the proposition \"Logic is fun and Julia is awesome\" depends on whether or not \"Julia is awesome\". If \"Julia is awesome\" is assigned false, then the conjunction of the two propositions is false. Use the interpret function to assign meaning to atomic propositions and then simplify the proposition.","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"julia> interpret(a -> ⊥, ¬p)\ntautology (generic function with 1 method)\n\njulia> (p ∧ q)(p => ⊤, q => ⊥)\ncontradiction (generic function with 1 method)","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Assigning meaning to any number of atomic propositions is called a valuation. Since p can only be true or false, those are it's possible valuations. An interpretation is the truth value of propositions that is determined by a given valuation. Since p is atomic, its valuation and interpretation are the same. ¬p doesn't depend on any other propositions, so it also has two possible valuations. However, the valuation and the interpretation are no longer the same. If p is assigned true, then ¬p is determined to be false, and vice versa.","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"julia> collect(valuations(¬p))\n2-element Vector{Vector}:\n Pair{Variable, typeof(tautology)}[Variable(:p) => PAndQ.tautology]\n Pair{Variable, typeof(contradiction)}[Variable(:p) => PAndQ.contradiction]\n\njulia> collect(interpretations(¬p))\n2-element Vector{Function}:\n contradiction (generic function with 1 method)\n tautology (generic function with 1 method)","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Since p ∧ q contains two atomic propositions, there are four valuations: p is true and q is true, p is false and q is true, p is true and q is false, and p is false and q is false. Each additional atomic proposition in a proposition doubles the number of possible valuations. Mathematically, there are 2 ^ n valuations where n = length(unique!(collect(atoms(p)))). Since each interpretation depends on a valuation, the number of valuations and interpretations are equal.","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"julia> n = length(unique!(collect(atoms(p ∧ q))))\n2\n\njulia> length(valuations(p ∧ q)) == length(interpretations(p ∧ q)) == 2 ^ n == 4\ntrue","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"It is useful to find valuations that determine valid interpretations. This is accomplished with the solve function. The proposition p ∧ q is determined to be true with the valuation that both p and q are true. Each of the other three possible valuations are invalid.","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"julia> collect(solve(p ∧ q))\n1-element Vector{Vector{Pair{Variable, typeof(tautology)}}}:\n [Variable(:p) => PAndQ.tautology, Variable(:q) => PAndQ.tautology]\n\njulia> collect(solve(¬(p ∧ q)))\n3-element Vector{Vector}:\n Pair{Variable}[Variable(:p) => PAndQ.contradiction, Variable(:q) => PAndQ.tautology]\n Pair{Variable}[Variable(:p) => PAndQ.tautology, Variable(:q) => PAndQ.contradiction]\n Pair{Variable, typeof(contradiction)}[Variable(:p) => PAndQ.contradiction, Variable(:q) => PAndQ.contradiction]","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"A proposition is_satisfiable if there is at least one valid interpretation. A proposition is_falsifiable if there is at least one invalid interpretation. A proposition is_contingency if it is both satisfiable and falsifiable.","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"julia> is_satisfiable(p ∧ q) && is_falsifiable(p ∧ q) && is_contingency(p ∧ q)\ntrue","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"A proposition is a tautology if every possible interpretation is true. Likewise, a proposition is a contradiction if every possible interpretation is false. For example, p ∧ ¬p is always interpreted as false because either p or ¬p must be false. p ∨ ¬p is always interpreted as true because either p or ¬p must be true. Use the functions is_tautology, is_contradiction, and is_truth to check whether a proposition is logically equivalent to a truth value.","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"julia> collect(interpretations(p ∧ ¬p))\n2-element Vector{typeof(contradiction)}:\n contradiction (generic function with 1 method)\n contradiction (generic function with 1 method)\n\njulia> collect(interpretations(p ∨ ¬p))\n2-element Vector{typeof(tautology)}:\n tautology (generic function with 1 method)\n tautology (generic function with 1 method)\n\njulia> is_contradiction(p ∧ ¬p) && is_tautology(p ∨ ¬p)\ntrue\n\njulia> is_truth(p ∧ ¬p) && is_truth(p ∨ ¬p)\ntrue","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Two propositions are logically equivalent if their interpretation is equivalent for every possible valuation. For example, the propositions ¬(¬p ∧ ¬q) and p ∨ q are logically equivalent. In fact, the or operator is implemented this way. Use == to test that two propositions are logically equivalent.","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"julia> ¬(¬p ∧ ¬q) == p ∨ q\ntrue\n\njulia> ¬(¬p ∧ ¬q) === p ∨ q\nfalse","category":"page"},{"location":"tutorial/#Printing","page":"Tutorial","title":"Printing","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"It would also be helpful to enumerate each valuation and interpretation in a visual format. This is accomplished by creating a TruthTable. A truth table is a table where each column in the header identifies a proposition, and each row contains an interpretation (including the valuation of atomic propositions). To demonstrate these, we will use the xor operator, represented by the symbol ⊻. Try to understand the meaning of this operator as it is interpreted with different valuations.","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"julia> TruthTable([p ⊻ q])\n┌──────────┬──────────┬───────┐\n│ p        │ q        │ p ⊻ q │\n│ Variable │ Variable │ Tree  │\n├──────────┼──────────┼───────┤\n│ ⊤        │ ⊤        │ ⊥     │\n│ ⊥        │ ⊤        │ ⊤     │\n├──────────┼──────────┼───────┤\n│ ⊤        │ ⊥        │ ⊤     │\n│ ⊥        │ ⊥        │ ⊥     │\n└──────────┴──────────┴───────┘","category":"page"},{"location":"manual/operators/","page":"Operators","title":"Operators","text":"DocTestSetup = :(using PAndQ)","category":"page"},{"location":"manual/operators/#operators_operators","page":"Operators","title":"Operators","text":"","category":"section"},{"location":"manual/operators/","page":"Operators","title":"Operators","text":"Typing symbols with tab completion is performed by typing \\, followed by the given characters, and then the [TAB] key. For example, ⊤ is typed with \\top[TAB]. See also Julia's documentation on Tab Completion and Unicode Input.","category":"page"},{"location":"manual/operators/","page":"Operators","title":"Operators","text":"Operator associativity determines how operators with the same precedence group their operands. For example, ∧ is left associative. Therefore, p ∧ q ∧ r is equivalent to (p ∧ q) ∧ r. Operator precedence determines how expressions with distinct operators are grouped together. Higher precedence operators will group their operands before lower precedence operators. For example, ∧ has a higher precedence than ∨. Therefore, p ∨ q ∧ r is equivalent to p ∨ (q ∧ r), even though both operators are left associative. See also Julia's documentation on Operator Precedence and Associativity.","category":"page"},{"location":"manual/operators/","page":"Operators","title":"Operators","text":"info: Info\n== has a precedence of 7, which is higher than that of several binary operators. For those cases, you may need to use parentheses. For example, @atomize p → q == r parses as @atomize p → (q == r) rather than @atomize (p → q) == r.","category":"page"},{"location":"manual/operators/","page":"Operators","title":"Operators","text":"Name Symbol Tab Completion Associativity Precedence\ntautology ⊤ \\top none 0\ncontradiction ⊥ \\bot none 0\nnot ¬ \\neg right 0\nand ∧ \\wedge left 12\nnand ⊼ \\nand left 12\nnor ⊽ \\nor left 11\nor ∨ \\vee left 11\nxor ⊻ \\xor left 11\nxnor ↔ \\leftrightarrow right 4\nimply → \\rightarrow right 4\nnot_imply ↛ \\nrightarrow right 4\nconverse_imply ← \\leftarrow right 4\nnot_converse_imply ↚ \\nleftarrow right 4","category":"page"},{"location":"manual/operators/","page":"Operators","title":"Operators","text":"Every possible truth table can be constructed with the functionally complete set of operators not and and. For convenience, all sixteen of them have been prepared. There are ten binary operators, with the remaining six being expressed with truth values, individual propositions, and the unary not operator.","category":"page"},{"location":"manual/operators/","page":"Operators","title":"Operators","text":"julia> @atomize TruthTable([Tree(⊤), Tree(⊥), ¬p, ¬q])\n┌──────┬──────┬──────────┬──────────┬─────────┬─────────┐\n│ ⊤    │ ⊥    │ p        │ q        │ ¬p      │ ¬q      │\n│ Tree │ Tree │ Variable │ Variable │ Literal │ Literal │\n├──────┼──────┼──────────┼──────────┼─────────┼─────────┤\n│ ⊤    │ ⊥    │ ⊤        │ ⊤        │ ⊥       │ ⊥       │\n│ ⊤    │ ⊥    │ ⊥        │ ⊤        │ ⊤       │ ⊥       │\n├──────┼──────┼──────────┼──────────┼─────────┼─────────┤\n│ ⊤    │ ⊥    │ ⊤        │ ⊥        │ ⊥       │ ⊤       │\n│ ⊤    │ ⊥    │ ⊥        │ ⊥        │ ⊤       │ ⊤       │\n└──────┴──────┴──────────┴──────────┴─────────┴─────────┘","category":"page"},{"location":"manual/operators/#Nullary-Operators","page":"Operators","title":"Nullary Operators","text":"","category":"section"},{"location":"manual/operators/","page":"Operators","title":"Operators","text":"tautology\ncontradiction","category":"page"},{"location":"manual/operators/#PAndQ.tautology","page":"Operators","title":"PAndQ.tautology","text":"tautology()\n⊤()\n\nLogical true operator.\n\n⊤ can be typed by \\top<tab>.\n\nExamples\n\njulia> TruthTable([Tree(⊤)])\n┌──────┐\n│ ⊤    │\n│ Tree │\n├──────┤\n│ ⊤    │\n└──────┘\n\n\n\n\n\n","category":"function"},{"location":"manual/operators/#PAndQ.contradiction","page":"Operators","title":"PAndQ.contradiction","text":"contradiction()\n⊥()\n\nLogical false operator.\n\n⊥ can be typed by \\bot<tab>.\n\nExamples\n\njulia> TruthTable([Tree(⊥)])\n┌──────┐\n│ ⊥    │\n│ Tree │\n├──────┤\n│ ⊥    │\n└──────┘\n\n\n\n\n\n","category":"function"},{"location":"manual/operators/#Unary-Operators","page":"Operators","title":"Unary Operators","text":"","category":"section"},{"location":"manual/operators/","page":"Operators","title":"Operators","text":"identity\nnot","category":"page"},{"location":"manual/operators/#Base.identity","page":"Operators","title":"Base.identity","text":"identity(p)\n\nLogical identity operator.\n\nExamples\n\njulia> @atomize TruthTable([identity(p)])\n┌──────────┐\n│ p        │\n│ Variable │\n├──────────┤\n│ ⊤        │\n│ ⊥        │\n└──────────┘\n\n\n\n\n\n","category":"function"},{"location":"manual/operators/#PAndQ.not","page":"Operators","title":"PAndQ.not","text":"not(p)\n¬p\n\nLogical negation operator.\n\n¬ can be typed by \\neg<tab>.\n\nExamples\n\njulia> @atomize TruthTable([¬p])\n┌──────────┬─────────┐\n│ p        │ ¬p      │\n│ Variable │ Literal │\n├──────────┼─────────┤\n│ ⊤        │ ⊥       │\n│ ⊥        │ ⊤       │\n└──────────┴─────────┘\n\n\n\n\n\n","category":"function"},{"location":"manual/operators/#Binary-Operators","page":"Operators","title":"Binary Operators","text":"","category":"section"},{"location":"manual/operators/","page":"Operators","title":"Operators","text":"tip: Tip\nEach binary operator bo has been curried such that bo(p) = q -> bo(p, q) and bo(p)(q) == bo(p, q).","category":"page"},{"location":"manual/operators/","page":"Operators","title":"Operators","text":"and\nnand\nnor\nor\nxor\nxnor\nimply\nnot_imply\nconverse_imply\nnot_converse_imply","category":"page"},{"location":"manual/operators/#PAndQ.and","page":"Operators","title":"PAndQ.and","text":"and(p, q)\np ∧ q\n\nLogical conjunction operator.\n\n∧ can be typed by \\wedge<tab>.\n\nExamples\n\njulia> @atomize TruthTable([p ∧ q])\n┌──────────┬──────────┬───────┐\n│ p        │ q        │ p ∧ q │\n│ Variable │ Variable │ Tree  │\n├──────────┼──────────┼───────┤\n│ ⊤        │ ⊤        │ ⊤     │\n│ ⊥        │ ⊤        │ ⊥     │\n├──────────┼──────────┼───────┤\n│ ⊤        │ ⊥        │ ⊥     │\n│ ⊥        │ ⊥        │ ⊥     │\n└──────────┴──────────┴───────┘\n\n\n\n\n\n","category":"function"},{"location":"manual/operators/#Base.nand","page":"Operators","title":"Base.nand","text":"nand(p, q)\np ⊼ q\n\nLogical non-conjunction operator.\n\n⊼ can be typed by \\nand<tab>.\n\nExamples\n\njulia> @atomize TruthTable([p ⊼ q])\n┌──────────┬──────────┬───────┐\n│ p        │ q        │ p ⊼ q │\n│ Variable │ Variable │ Tree  │\n├──────────┼──────────┼───────┤\n│ ⊤        │ ⊤        │ ⊥     │\n│ ⊥        │ ⊤        │ ⊤     │\n├──────────┼──────────┼───────┤\n│ ⊤        │ ⊥        │ ⊤     │\n│ ⊥        │ ⊥        │ ⊤     │\n└──────────┴──────────┴───────┘\n\n\n\n\n\n","category":"function"},{"location":"manual/operators/#Base.nor","page":"Operators","title":"Base.nor","text":"nor(p, q)\np ⊽ q\n\nLogical non-disjunction operator.\n\n⊽ can be typed by \\nor<tab>.\n\nExamples\n\njulia> @atomize TruthTable([p ⊽ q])\n┌──────────┬──────────┬───────┐\n│ p        │ q        │ p ⊽ q │\n│ Variable │ Variable │ Tree  │\n├──────────┼──────────┼───────┤\n│ ⊤        │ ⊤        │ ⊥     │\n│ ⊥        │ ⊤        │ ⊥     │\n├──────────┼──────────┼───────┤\n│ ⊤        │ ⊥        │ ⊥     │\n│ ⊥        │ ⊥        │ ⊤     │\n└──────────┴──────────┴───────┘\n\n\n\n\n\n","category":"function"},{"location":"manual/operators/#PAndQ.or","page":"Operators","title":"PAndQ.or","text":"or(p, q)\np ∨ q\n\nLogical disjunction operator.\n\n∨ can be typed by \\vee<tab>.\n\nExamples\n\njulia> @atomize TruthTable([p ∨ q])\n┌──────────┬──────────┬───────┐\n│ p        │ q        │ p ∨ q │\n│ Variable │ Variable │ Tree  │\n├──────────┼──────────┼───────┤\n│ ⊤        │ ⊤        │ ⊤     │\n│ ⊥        │ ⊤        │ ⊤     │\n├──────────┼──────────┼───────┤\n│ ⊤        │ ⊥        │ ⊤     │\n│ ⊥        │ ⊥        │ ⊥     │\n└──────────┴──────────┴───────┘\n\n\n\n\n\n","category":"function"},{"location":"manual/operators/#Base.xor","page":"Operators","title":"Base.xor","text":"xor(p, q)\np ⊻ q\n\nLogical exclusive disjunction operator.\n\n⊻ can be typed by \\xor<tab>.\n\nExamples\n\njulia> @atomize TruthTable([p ⊻ q])\n┌──────────┬──────────┬───────┐\n│ p        │ q        │ p ⊻ q │\n│ Variable │ Variable │ Tree  │\n├──────────┼──────────┼───────┤\n│ ⊤        │ ⊤        │ ⊥     │\n│ ⊥        │ ⊤        │ ⊤     │\n├──────────┼──────────┼───────┤\n│ ⊤        │ ⊥        │ ⊤     │\n│ ⊥        │ ⊥        │ ⊥     │\n└──────────┴──────────┴───────┘\n\n\n\n\n\n","category":"function"},{"location":"manual/operators/#PAndQ.xnor","page":"Operators","title":"PAndQ.xnor","text":"xnor(p, q)\np ↔ q\n\nLogical exclusive non-disjunction and biconditional operator.\n\n↔ can be typed by \\leftrightarrow<tab>.\n\nExamples\n\njulia> @atomize TruthTable([p ↔ q])\n┌──────────┬──────────┬───────┐\n│ p        │ q        │ p ↔ q │\n│ Variable │ Variable │ Tree  │\n├──────────┼──────────┼───────┤\n│ ⊤        │ ⊤        │ ⊤     │\n│ ⊥        │ ⊤        │ ⊥     │\n├──────────┼──────────┼───────┤\n│ ⊤        │ ⊥        │ ⊥     │\n│ ⊥        │ ⊥        │ ⊤     │\n└──────────┴──────────┴───────┘\n\n\n\n\n\n","category":"function"},{"location":"manual/operators/#PAndQ.imply","page":"Operators","title":"PAndQ.imply","text":"imply(p, q)\np → q\n\nLogical implication operator.\n\n→ can be typed by \\rightarrow<tab>.\n\nExamples\n\njulia> @atomize TruthTable([p → q])\n┌──────────┬──────────┬───────┐\n│ p        │ q        │ p → q │\n│ Variable │ Variable │ Tree  │\n├──────────┼──────────┼───────┤\n│ ⊤        │ ⊤        │ ⊤     │\n│ ⊥        │ ⊤        │ ⊤     │\n├──────────┼──────────┼───────┤\n│ ⊤        │ ⊥        │ ⊥     │\n│ ⊥        │ ⊥        │ ⊤     │\n└──────────┴──────────┴───────┘\n\n\n\n\n\n","category":"function"},{"location":"manual/operators/#PAndQ.not_imply","page":"Operators","title":"PAndQ.not_imply","text":"not_imply(p, q)\np ↛ q\n\nLogical non-implication operator.\n\n↛ can be typed by \\nrightarrow<tab>.\n\nExamples\n\njulia> @atomize TruthTable([p ↛ q])\n┌──────────┬──────────┬───────┐\n│ p        │ q        │ p ↛ q │\n│ Variable │ Variable │ Tree  │\n├──────────┼──────────┼───────┤\n│ ⊤        │ ⊤        │ ⊥     │\n│ ⊥        │ ⊤        │ ⊥     │\n├──────────┼──────────┼───────┤\n│ ⊤        │ ⊥        │ ⊤     │\n│ ⊥        │ ⊥        │ ⊥     │\n└──────────┴──────────┴───────┘\n\n\n\n\n\n","category":"function"},{"location":"manual/operators/#PAndQ.converse_imply","page":"Operators","title":"PAndQ.converse_imply","text":"converse_imply(p, q)\np ← q\n\nLogical converse implication operator.\n\n← can be typed by \\leftarrow<tab>.\n\nExamples\n\njulia> @atomize TruthTable([p ← q])\n┌──────────┬──────────┬───────┐\n│ p        │ q        │ p ← q │\n│ Variable │ Variable │ Tree  │\n├──────────┼──────────┼───────┤\n│ ⊤        │ ⊤        │ ⊤     │\n│ ⊥        │ ⊤        │ ⊥     │\n├──────────┼──────────┼───────┤\n│ ⊤        │ ⊥        │ ⊤     │\n│ ⊥        │ ⊥        │ ⊤     │\n└──────────┴──────────┴───────┘\n\n\n\n\n\n","category":"function"},{"location":"manual/operators/#PAndQ.not_converse_imply","page":"Operators","title":"PAndQ.not_converse_imply","text":"not_converse_imply(p, q)\np ↚ q\n\nLogical converse non-implication operator.\n\n↚ can be typed by \\nleftarrow<tab>.\n\nExamples\n\njulia> @atomize TruthTable([p ↚ q])\n┌──────────┬──────────┬───────┐\n│ p        │ q        │ p ↚ q │\n│ Variable │ Variable │ Tree  │\n├──────────┼──────────┼───────┤\n│ ⊤        │ ⊤        │ ⊥     │\n│ ⊥        │ ⊤        │ ⊤     │\n├──────────┼──────────┼───────┤\n│ ⊤        │ ⊥        │ ⊥     │\n│ ⊥        │ ⊥        │ ⊥     │\n└──────────┴──────────┴───────┘\n\n\n\n\n\n","category":"function"},{"location":"manual/operators/#Reductions","page":"Operators","title":"Reductions","text":"","category":"section"},{"location":"manual/operators/","page":"Operators","title":"Operators","text":"conjunction\ndisjunction\nmapfoldl\nmapfoldr","category":"page"},{"location":"manual/operators/#PAndQ.conjunction","page":"Operators","title":"PAndQ.conjunction","text":"conjunction(ps)\n⋀(ps)\n\nEquivalent to foldl(∧, ps; init = tautology).\n\n⋀ can be typed by \\bigwedge<tab>.\n\nSee also and and tautology.\n\nExamples\n\njulia> @atomize ⋀([p, q, r, s])\n((p ∧ q) ∧ r) ∧ s\n\n\n\n\n\n","category":"function"},{"location":"manual/operators/#PAndQ.disjunction","page":"Operators","title":"PAndQ.disjunction","text":"disjunction(ps)\n⋁(ps)\n\nEquivalent to foldl(∨, ps; init = contradiction).\n\n⋁ can be typed by \\bigvee<tab>.\n\nSee also or and contradiction.\n\nExamples\n\njulia> @atomize ⋁([p, q, r, s])\n((p ∨ q) ∨ r) ∨ s\n\n\n\n\n\n","category":"function"},{"location":"manual/operators/#Base.mapfoldl","page":"Operators","title":"Base.mapfoldl","text":"mapfoldl(f, lio::LeftNeutralOperator, ps)\n\nEquivalent to mapfoldl(f, lio, ps, init = Bool(first(left_neutrals(lio)))).\n\nSee also LeftNeutralOperator.\n\ntip: Tip\nThis also works with foldl(lio, ps).\n\nExamples\n\njulia> @atomize mapfoldl(not, and, [p, q, r, s])\n((¬p ∧ ¬q) ∧ ¬r) ∧ ¬s\n\njulia> foldl(and, [])\ntrue\n\n\n\n\n\n","category":"function"},{"location":"manual/operators/#Base.mapfoldr","page":"Operators","title":"Base.mapfoldr","text":"mapfoldr(f, rio::RightNeutralOperator, ps)\n\nEquivalent to mapfoldr(f, rio, ps, init = Bool(first(right_neutrals(rio)))).\n\nSee also RightNeutralOperator.\n\ntip: Tip\nThis also works with foldr(rio, ps).\n\nExamples\n\njulia> @atomize mapfoldr(not, and, [p, q, r, s])\n¬p ∧ (¬q ∧ (¬r ∧ ¬s))\n\njulia> foldr(and, [])\ntrue\n\n\n\n\n\n","category":"function"},{"location":"manual/operators/#Utilities","page":"Operators","title":"Utilities","text":"","category":"section"},{"location":"manual/operators/","page":"Operators","title":"Operators","text":"arity","category":"page"},{"location":"manual/operators/#PAndQ.arity","page":"Operators","title":"PAndQ.arity","text":"arity(::LogicalOperator)\n\nReturn the arity of the given LogicalOperator.\n\nExamples\n\njulia> arity(tautology)\n0\n\njulia> arity(not)\n1\n\njulia> arity(and)\n2\n\n\n\n\n\n","category":"function"},{"location":"manual/propositions/#Propositions","page":"Propositions","title":"Propositions","text":"","category":"section"},{"location":"manual/propositions/","page":"Propositions","title":"Propositions","text":"tip: Tip\nPropositions can be converted into different, but logically equivalent forms (see also ==). For example, ⊥ == Tree(⊥) == Clause(⊥) == Normal(⊥). However, not all forms are Expressively complete. Otherwise, the conversion may throw an exception. For example, there is no way to represent Literal(⊥).","category":"page"},{"location":"manual/propositions/","page":"Propositions","title":"Propositions","text":"import AbstractTrees: children # hide\nusing AbstractTrees: print_tree # hide\nusing InteractiveUtils: subtypes # hide\nusing PAndQ: Proposition # hide\n\nchildren(x::Type) = subtypes(x) # hide\nprint_tree(Proposition) # hide","category":"page"},{"location":"manual/propositions/#Abstract-Types","page":"Propositions","title":"Abstract Types","text":"","category":"section"},{"location":"manual/propositions/","page":"Propositions","title":"Propositions","text":"Proposition\nAtom\nCompound\nExpressive","category":"page"},{"location":"manual/propositions/#PAndQ.Proposition","page":"Propositions","title":"PAndQ.Proposition","text":"Proposition\n\nThe set of well-formed logical formulae.\n\nSupertype of Atom and Compound.\n\n\n\n\n\n","category":"type"},{"location":"manual/propositions/#PAndQ.Atom","page":"Propositions","title":"PAndQ.Atom","text":"Atom <: Proposition\n\nA proposition with no deeper propositional structure.\n\ntip: Tip\nUse @atomize and @variables for syntax sugar to instantiate atoms inline and define variables, respectively.\n\nSubtype of Proposition. Supertype of Constant and Variable.\n\n\n\n\n\n","category":"type"},{"location":"manual/propositions/#PAndQ.Compound","page":"Propositions","title":"PAndQ.Compound","text":"Compound{LO} <: Proposition\n\nA proposition composed from connecting Atomic propositions with LogicalOperators.\n\nSubtype of Proposition. Supertype of Literal, Clause, and Expressive.\n\n\n\n\n\n","category":"type"},{"location":"manual/propositions/#PAndQ.Expressive","page":"Propositions","title":"PAndQ.Expressive","text":"Expressive{LO} <: Compound{LO}\n\nA proposition that is expressively complete.\n\nSubtype of Compound. Supertype of Tree and Normal.\n\n\n\n\n\n","category":"type"},{"location":"manual/propositions/#Concrete-Types","page":"Propositions","title":"Concrete Types","text":"","category":"section"},{"location":"manual/propositions/","page":"Propositions","title":"Propositions","text":"Constant\nVariable\nLiteral\nTree\nClause\nNormal","category":"page"},{"location":"manual/propositions/#PAndQ.Constant","page":"Propositions","title":"PAndQ.Constant","text":"Constant{T} <: Atom\nConstant(::T)\n\nAn atomic sentence.\n\ntip: Tip\nDefine pretty-printing for an instance of Constant{T} by overloading show(io::IO, ::MIME\"text/plain\", p::Constant{T}).\n\nSubtype of Atom.\n\nExamples\n\njulia> Constant(1)\n$(1)\n\njulia> Constant(\"Logic is fun\")\n$(\"Logic is fun\")\n\n\n\n\n\n","category":"type"},{"location":"manual/propositions/#PAndQ.Variable","page":"Propositions","title":"PAndQ.Variable","text":"Variable <: Atom\n\nAn atomic formula.\n\nSubtype of Atom.\n\nExamples\n\njulia> Variable(:p)\np\n\njulia> Variable(:q)\nq\n\n\n\n\n\n","category":"type"},{"location":"manual/propositions/#PAndQ.Literal","page":"Propositions","title":"PAndQ.Literal","text":"Literal{UO <: UnaryOperator, A <: Atom} <: Compound{UO}\nLiteral(::UO, ::A)\nLiteral(::LiteralProposition)\n\nA proposition represented by an atomic formula or its negation.\n\nSubtype of Compound. See also UnaryOperator, Atom, and LiteralProposition.\n\nExamples\n\njulia> @atomize r = ¬p\n¬p\n\njulia> ¬r\np\n\n\n\n\n\n","category":"type"},{"location":"manual/propositions/#PAndQ.Tree","page":"Propositions","title":"PAndQ.Tree","text":"Tree{LO <: LogicalOperator, AT <: Union{Atom, Tree}} <: Expressive{LO}\nTree(::NullaryOperator, ::Atom)\nTree(::LogicalOperator, ::Tree...)\nTree(::Proposition)\n\nA proposition represented by an abstract syntax tree.\n\nSubtype of Expressive. See also LogicalOperator.\n\nExamples\n\njulia> @atomize r = p ⊻ q\np ⊻ q\n\njulia> @atomize ¬r → s\n(p ↔ q) → s\n\n\n\n\n\n","category":"type"},{"location":"manual/propositions/#PAndQ.Clause","page":"Propositions","title":"PAndQ.Clause","text":"Clause{AO <: AndOr, L <: Literal} <: Compound{AO}\nClause(::AO, ps = Literal[])\nClause(::AO, p::Proposition)\nClause(::Union{NullaryOperator, LiteralProposition})\n\nA proposition represented as either a conjunction or disjunction of literals.\n\ninfo: Info\nAn empty clause is logically equivalent to the neutral element of it's binary operator.\n\nSubtype of Compound. See also AndOr, Literal, NullaryOperator, and LiteralProposition.\n\nExamples\n\njulia> Clause(and)\n⊤\n\njulia> @atomize Clause(p)\np\n\njulia> @atomize Clause(or, [¬p, q])\n¬p ∨ q\n\n\n\n\n\n","category":"type"},{"location":"manual/propositions/#PAndQ.Normal","page":"Propositions","title":"PAndQ.Normal","text":"Normal{AO <: AndOr, C <: Clause} <: Expressive{AO}\nNormal(::typeof(and), ps = Clause{typeof(or)}[])\nNormal(::typeof(or), ps = Clause{typeof(and)}[])\nNormal(::AO, ::Proposition)\nNormal(::Union{NullaryOperator, Proposition})\n\nA proposition represented in conjunctive or disjunctive normal form.\n\ninfo: Info\nAn empty normal form is logically equivalent to the neutral element of it's binary operator.\n\nSubtype of Expressive. See also AndOr, Clause, NullaryOperator, and Proposition.\n\nExamples\n\njulia> @atomize s = Normal(and, [Clause(or, [p, q]), Clause(or, ¬r)])\n(p ∨ q) ∧ (¬r)\n\njulia> ¬s\n(¬p ∧ ¬q) ∨ (r)\n\n\n\n\n\n","category":"type"},{"location":"manual/propositions/#Macros","page":"Propositions","title":"Macros","text":"","category":"section"},{"location":"manual/propositions/","page":"Propositions","title":"Propositions","text":"@atomize\n@variables\n@p_str","category":"page"},{"location":"manual/propositions/#PAndQ.@atomize","page":"Propositions","title":"PAndQ.@atomize","text":"@atomize(expression)\n\nInstantiate undefined variables and interpolated values inline as Atoms.\n\nwarning: Warning\nThis macro attempts to ignore symbols that are being assigned a value. For example, @atomize f(; x = p) = x ∧ q should be equivalent to @atomize f(; x = Atom(:p)) = x ∧ Atom(:q). However, this feature is in-progress and only works in some cases. The implementation is cautious to skip the parts of the expression that it cannot yet handle.\n\nExamples\n\njulia> @atomize x = p ∧ q\np ∧ q\n\njulia> @atomize x → r\n(p ∧ q) → r\n\njulia> @atomize $1 ∧ $(1 + 1)\n$(1) ∧ $(2)\n\n\n\n\n\n","category":"macro"},{"location":"manual/propositions/#PAndQ.@variables","page":"Propositions","title":"PAndQ.@variables","text":"@variables(xs...)\n\nDefine variables and return a vector containing them.\n\nExpressions of the form symbol and symbol = value are defined as symbol = @atomize symbol and symbol = @atomize value, respectively.\n\nSee also @atomize.\n\nExamples\n\njulia> @variables p q = ¬$1\n2-element Vector{Proposition}:\n p\n ¬$(1)\n\njulia> p\np\n\njulia> q\n¬$(1)\n\n\n\n\n\n","category":"macro"},{"location":"manual/propositions/#PAndQ.@p_str","page":"Propositions","title":"PAndQ.@p_str","text":"@p_str(x)\n\nExamples\n\njulia> x = @p_str(\"p\")\np\n\njulia> p\"[x ∧ q, Clause(and)]\"\n2-element Vector{Compound{typeof(and)}}:\n p ∧ q\n ⊤\n\n\n\n\n\n","category":"macro"},{"location":"manual/propositions/#Utilities","page":"Propositions","title":"Utilities","text":"","category":"section"},{"location":"manual/propositions/","page":"Propositions","title":"Propositions","text":"atoms\noperators\nmap","category":"page"},{"location":"manual/propositions/#PAndQ.atoms","page":"Propositions","title":"PAndQ.atoms","text":"atoms(p, T = Atom)\n\nReturn an iterator of each Atom of type T contained in p.\n\nSee also Constant and Variable.\n\nExamples\n\njulia> @atomize collect(atoms(p ∧ q))\n2-element Vector{Variable}:\n p\n q\n\njulia> @atomize collect(atoms(p ∧ q ∨ $1 ∧ $2, Constant))\n2-element Vector{Constant{Int64}}:\n $(1)\n $(2)\n\n\n\n\n\n","category":"function"},{"location":"manual/propositions/#PAndQ.operators","page":"Propositions","title":"PAndQ.operators","text":"operators(p)\n\nReturn an iterator of each LogicalOperator contained in p.\n\nExamples\n\njulia> @atomize collect(operators(¬p))\n1-element Vector{typeof(not)}:\n not (generic function with 19 methods)\n\njulia> @atomize collect(operators(¬p ∧ q))\n3-element Vector{Function}:\n and (generic function with 25 methods)\n not (generic function with 19 methods)\n identity (generic function with 1 method)\n\n\n\n\n\n","category":"function"},{"location":"manual/propositions/#Base.map","page":"Propositions","title":"Base.map","text":"map(f, ::Proposition)\n\nApply f to each Atom in the Proposition.\n\nExamples\n\njulia> @atomize map(Tree ∘ ¬, p ∧ q)\n¬p ∧ ¬q\n\njulia> @atomize map(p ∧ q) do atom\n           println(atom)\n           atom\n       end\nVariable(:p)\nVariable(:q)\np ∧ q\n\n\n\n\n\n","category":"function"},{"location":"manual/semantics/#Semantics","page":"Semantics","title":"Semantics","text":"","category":"section"},{"location":"manual/semantics/#Properties","page":"Semantics","title":"Properties","text":"","category":"section"},{"location":"manual/semantics/","page":"Semantics","title":"Semantics","text":"dual\nconverse\nleft_neutrals\nright_neutrals","category":"page"},{"location":"manual/semantics/#PAndQ.dual","page":"Semantics","title":"PAndQ.dual","text":"dual(::LogicalOperator)\n\nReturns the LogicalOperator that is the dual of the given boolean operator.\n\nExamples\n\njulia> dual(and)\nor (generic function with 21 methods)\n\njulia> @atomize and(p, q) == not(dual(and)(not(p), not(q)))\ntrue\n\njulia> dual(imply)\nnot_converse_imply (generic function with 6 methods)\n\njulia> @atomize imply(p, q) == not(dual(imply)(not(p), not(q)))\ntrue\n\n\n\n\n\n","category":"function"},{"location":"manual/semantics/#PAndQ.converse","page":"Semantics","title":"PAndQ.converse","text":"converse(::LogicalOperator)\n\nReturns the LogicalOperator that is the converse of the given boolean operator.\n\nExamples\n\njulia> converse(and)\nand (generic function with 25 methods)\n\njulia> @atomize and(p, q) == converse(and)(q, p)\ntrue\n\njulia> converse(imply)\nconverse_imply (generic function with 6 methods)\n\njulia> @atomize imply(p, q) == converse(imply)(q, p)\ntrue\n\n\n\n\n\n","category":"function"},{"location":"manual/semantics/#PAndQ.left_neutrals","page":"Semantics","title":"PAndQ.left_neutrals","text":"left_neutrals(::LogicalOperator)\n\nReturn the corresponding left identity elements of the operator. The identity elements can be tautology, contradiction, neither (empty set), or both.\n\nExamples\n\njulia> left_neutrals(or)\nSet{Union{typeof(contradiction), typeof(tautology)}} with 1 element:\n  PAndQ.contradiction\n\njulia> left_neutrals(imply)\nSet{Union{typeof(contradiction), typeof(tautology)}} with 1 element:\n  PAndQ.tautology\n\njulia> left_neutrals(nor)\nSet{Union{typeof(contradiction), typeof(tautology)}}()\n\n\n\n\n\n","category":"function"},{"location":"manual/semantics/#PAndQ.right_neutrals","page":"Semantics","title":"PAndQ.right_neutrals","text":"right_neutrals(::LogicalOperator)\n\nReturn the corresponding right identity elements of the operator. The identity elements can be tautology, contradiction, neither (empty set), or both.\n\nExamples\n\njulia> right_neutrals(or)\nSet{Union{typeof(contradiction), typeof(tautology)}} with 1 element:\n  PAndQ.contradiction\n\njulia> right_neutrals(converse_imply)\nSet{Union{typeof(contradiction), typeof(tautology)}} with 1 element:\n  PAndQ.tautology\n\n\n\n\n\n","category":"function"},{"location":"manual/semantics/#Truths","page":"Semantics","title":"Truths","text":"","category":"section"},{"location":"manual/semantics/","page":"Semantics","title":"Semantics","text":"valuations\ninterpret\ninterpretations\nsolve","category":"page"},{"location":"manual/semantics/#PAndQ.valuations","page":"Semantics","title":"PAndQ.valuations","text":"valuations(atoms)\nvaluations(::Proposition)\n\nReturn an iterator of every possible valuation of Atoms.\n\nExamples\n\njulia> @atomize collect(valuations(p))\n2-element Vector{Vector}:\n Pair{Variable, typeof(tautology)}[Variable(:p) => PAndQ.tautology]\n Pair{Variable, typeof(contradiction)}[Variable(:p) => PAndQ.contradiction]\n\njulia> @atomize collect(valuations(p ∧ q))\n4-element Vector{Vector}:\n Pair{Variable, typeof(tautology)}[Variable(:p) => PAndQ.tautology, Variable(:q) => PAndQ.tautology]\n Pair{Variable}[Variable(:p) => PAndQ.contradiction, Variable(:q) => PAndQ.tautology]\n Pair{Variable}[Variable(:p) => PAndQ.tautology, Variable(:q) => PAndQ.contradiction]\n Pair{Variable, typeof(contradiction)}[Variable(:p) => PAndQ.contradiction, Variable(:q) => PAndQ.contradiction]\n\n\n\n\n\n","category":"function"},{"location":"manual/semantics/#PAndQ.interpret","page":"Semantics","title":"PAndQ.interpret","text":"interpret(valuation, ::Proposition)\n\nReplace each Atom p in the given Proposition with valuation(p), then simplify.\n\nCalling p with an incomplete mapping will partially interpret it.\n\nSee also tautology and contradiction.\n\nExamples\n\njulia> @atomize interpret(a -> ⊤, ¬p)\ncontradiction (generic function with 1 method)\n\njulia> @atomize interpret(a -> get(Dict(p => ⊤), a, a), p ∧ q)\nq\n\n\n\n\n\n(::Proposition)(valuation)\n(::Proposition)(valuation...)\n\nEquivalent to interpret(a -> get(Dict(valuation), a, a), p).\n\nSee also Proposition.\n\nExamples\n\njulia> @atomize (¬p)(p => ⊤)\ncontradiction (generic function with 1 method)\n\njulia> @atomize p = Clause(and, [q, r, s])\nq ∧ r ∧ s\n\njulia> @atomize p(q => ⊤, r => ⊤)\ns\n\n\n\n\n\n","category":"function"},{"location":"manual/semantics/#PAndQ.interpretations","page":"Semantics","title":"PAndQ.interpretations","text":"interpretations(p, valuations = valuations(p))\n\nReturn an iterator of truth values given by interpreting p with each valuation.\n\nExamples\n\njulia> @atomize collect(interpretations(p))\n2-element Vector{Function}:\n tautology (generic function with 1 method)\n contradiction (generic function with 1 method)\n\njulia> @atomize collect(interpretations(p → q, [p => ⊤]))\n1-element Vector{Variable}:\n q\n\n\n\n\n\n","category":"function"},{"location":"manual/semantics/#PAndQ.solve","page":"Semantics","title":"PAndQ.solve","text":"solve(p)\n\nReturn a vector containing all interpretations such that interpret(p, valuation) == ⊤.\n\nSee also interpret and tautology.\n\nExamples\n\njulia> @atomize collect(solve(p))\n1-element Vector{Vector{Pair{Variable, typeof(tautology)}}}:\n [Variable(:p) => PAndQ.tautology]\n\njulia> @atomize collect(solve(p ⊻ q))\n2-element Vector{Vector{Pair{Variable}}}:\n [Variable(:p) => PAndQ.contradiction, Variable(:q) => PAndQ.tautology]\n [Variable(:p) => PAndQ.tautology, Variable(:q) => PAndQ.contradiction]\n\n\n\n\n\n","category":"function"},{"location":"manual/semantics/#Predicates","page":"Semantics","title":"Predicates","text":"","category":"section"},{"location":"manual/semantics/","page":"Semantics","title":"Semantics","text":"==\nis_tautology\nis_contradiction\nis_truth\nis_contingency\nis_satisfiable\nis_falsifiable","category":"page"},{"location":"manual/semantics/#Base.:==","page":"Semantics","title":"Base.:==","text":"==(::Union{NullaryOperator, Proposition}, ::Union{NullaryOperator, Proposition})\np == q\n\nReturns a boolean indicating whether p and q are logically equivalent.\n\nConstants are equivalent if and only if their values are equivalent.\n\ninfo: Info\nThe ≡ symbol is sometimes used to represent logical equivalence. However, Julia uses ≡ as an alias for the builtin function === which cannot have methods added to it. Use == and === to test for equivalence and identity, respectively.\n\nSee also NullaryOperator and Proposition.\n\nExamples\n\njulia> @atomize p == ¬p\nfalse\n\njulia> @atomize ¬(p ⊻ q) == (p → q) ∧ (p ← q)\ntrue\n\njulia> @atomize ¬(p ⊻ q) === (p → q) ∧ (p ← q)\nfalse\n\n\n\n\n\n","category":"function"},{"location":"manual/semantics/#PAndQ.is_tautology","page":"Semantics","title":"PAndQ.is_tautology","text":"is_tautology(p)\n\nReturns a boolean on whether p is a tautology.\n\nExamples\n\njulia> is_tautology(⊤)\ntrue\n\njulia> @atomize is_tautology(p)\nfalse\n\njulia> @atomize is_tautology(¬(p ∧ ¬p))\ntrue\n\n\n\n\n\n","category":"function"},{"location":"manual/semantics/#PAndQ.is_contradiction","page":"Semantics","title":"PAndQ.is_contradiction","text":"is_contradiction(p)\n\nReturns a boolean on whether p is a contradiction.\n\nExamples\n\njulia> is_contradiction(⊥)\ntrue\n\njulia> @atomize is_contradiction(p)\nfalse\n\njulia> @atomize is_contradiction(p ∧ ¬p)\ntrue\n\n\n\n\n\n","category":"function"},{"location":"manual/semantics/#PAndQ.is_truth","page":"Semantics","title":"PAndQ.is_truth","text":"is_truth(p)\n\nReturns a boolean on whether p is a truth value (either a tautology or contradiction).\n\nSee also Proposition.\n\nExamples\n\njulia> is_truth(⊤)\ntrue\n\njulia> @atomize is_truth(p ∧ ¬p)\ntrue\n\njulia> @atomize is_truth(p)\nfalse\n\njulia> @atomize is_truth(p ∧ q)\nfalse\n\n\n\n\n\n","category":"function"},{"location":"manual/semantics/#PAndQ.is_contingency","page":"Semantics","title":"PAndQ.is_contingency","text":"is_contingency(p)\n\nReturns a boolean on whether p is a contingency (neither a tautology or contradiction).\n\nSee also Proposition.\n\nExamples\n\njulia> is_contingency(⊤)\nfalse\n\njulia> @atomize is_contingency(p ∧ ¬p)\nfalse\n\njulia> @atomize is_contingency(p)\ntrue\n\njulia> @atomize is_contingency(p ∧ q)\ntrue\n\n\n\n\n\n","category":"function"},{"location":"manual/semantics/#PAndQ.is_satisfiable","page":"Semantics","title":"PAndQ.is_satisfiable","text":"is_satisfiable(p)\n\nReturns a boolean on whether p is satisfiable (not a contradiction).\n\nSee also Proposition.\n\nExamples\n\njulia> is_satisfiable(⊤)\ntrue\n\njulia> @atomize is_satisfiable(p ∧ ¬p)\nfalse\n\njulia> @atomize is_satisfiable(p)\ntrue\n\njulia> @atomize is_satisfiable(p ∧ q)\ntrue\n\n\n\n\n\n","category":"function"},{"location":"manual/semantics/#PAndQ.is_falsifiable","page":"Semantics","title":"PAndQ.is_falsifiable","text":"is_falsifiable(p)\n\nReturns a boolean on whether p is falsifiable (not a tautology).\n\nSee also Proposition.\n\nExamples\n\njulia> is_falsifiable(⊥)\ntrue\n\njulia> @atomize is_falsifiable(¬(p ∧ ¬p))\nfalse\n\njulia> @atomize is_falsifiable(p)\ntrue\n\njulia> @atomize is_falsifiable(p ∧ q)\ntrue\n\n\n\n\n\n","category":"function"},{"location":"manual/semantics/#Utilities","page":"Semantics","title":"Utilities","text":"","category":"section"},{"location":"manual/semantics/","page":"Semantics","title":"Semantics","text":"convert","category":"page"},{"location":"manual/semantics/#Base.convert","page":"Semantics","title":"Base.convert","text":"convert(::Type{<:Proposition}, ::Union{NullaryOperator, Proposition})\n\n\n\n\n\n","category":"function"},{"location":"manual/printing/#Printing","page":"Printing","title":"Printing","text":"","category":"section"},{"location":"manual/printing/","page":"Printing","title":"Printing","text":"TruthTable\nshow\nformatter\npretty_table(::IO, ::TruthTable)\nprint_tree","category":"page"},{"location":"manual/printing/#PAndQ.TruthTable","page":"Printing","title":"PAndQ.TruthTable","text":"TruthTable(ps)\n\nConstruct a truth table for the given Propositions and LogicalOperators.\n\nThe header is a vector containing vectors of logically equivalent propositions. The sub_header corresponds to the header, but contains each proposition's UnionAll type. The body is a matrix where the rows contain interpretations of each proposition in the given column.\n\nSee also tautology and contradiction.\n\nExamples\n\njulia> TruthTable([Tree(⊤)])\n┌──────┐\n│ ⊤    │\n│ Tree │\n├──────┤\n│ ⊤    │\n└──────┘\n\njulia> @atomize TruthTable([¬p])\n┌──────────┬─────────┐\n│ p        │ ¬p      │\n│ Variable │ Literal │\n├──────────┼─────────┤\n│ ⊤        │ ⊥       │\n│ ⊥        │ ⊤       │\n└──────────┴─────────┘\n\njulia> @atomize TruthTable([p ∧ ¬p, p ⊻ q, ¬(p ∧ q) ∧ (p ∨ q)])\n┌────────┬──────────┬──────────┬──────────────────────────┐\n│ p ∧ ¬p │ p        │ q        │ p ⊻ q, (p ⊼ q) ∧ (p ∨ q) │\n│ Tree   │ Variable │ Variable │ Tree, Tree               │\n├────────┼──────────┼──────────┼──────────────────────────┤\n│ ⊥      │ ⊤        │ ⊤        │ ⊥                        │\n│ ⊥      │ ⊥        │ ⊤        │ ⊤                        │\n├────────┼──────────┼──────────┼──────────────────────────┤\n│ ⊥      │ ⊤        │ ⊥        │ ⊤                        │\n│ ⊥      │ ⊥        │ ⊥        │ ⊥                        │\n└────────┴──────────┴──────────┴──────────────────────────┘\n\n\n\n\n\n","category":"type"},{"location":"manual/printing/#Base.show","page":"Printing","title":"Base.show","text":"show(::IO, ::MIME\"text/plain\", ::Proposition)\n\nRepresent the given Proposition as a propositional formula.\n\nExamples\n\njulia> @atomize x = p ⊻ q;\n\njulia> show(stdout, MIME\"text/plain\"(), x)\np ⊻ q\n\njulia> show(stdout, MIME\"text/plain\"(), Normal(x))\n(p ∨ q) ∧ (¬p ∨ ¬q)\n\n\n\n\n\nshow(::IO, ::MIME\"text/plain\", ::TruthTable)\n\nExamples\n\njulia> @atomize show(stdout, MIME\"text/plain\"(), TruthTable([p ∧ q]))\n\n\n\n\n\nshow(::IO, ::Proposition)\n\nRepresent the given Proposition expanded as valid Julia code.\n\nExamples\n\njulia> @atomize s = sprint(show, p ∧ q)\n\"Tree(and, Tree(identity, Variable(:p)), Tree(identity, Variable(:q)))\"\n\njulia> @eval $(Meta.parse(s))\np ∧ q\n\n\n\n\n\n","category":"function"},{"location":"manual/printing/#PAndQ.formatter","page":"Printing","title":"PAndQ.formatter","text":"formatter(t::Type{<:Union{PAndQ.NullaryOperator, String, Char, Bool, Int}})\n\nt formatter(t)(⊤, _, _) formatter(t)(⊥, _, _)\nPAndQ.NullaryOperator \"⊤\" \"⊥\"\nString \"tautology\" \"contradiction\"\nChar \"T\" \"F\"\nBool \"true\" \"false\"\nInt \"1\" \"0\"\n\n\n\n\n\n","category":"function"},{"location":"manual/printing/#PrettyTables.pretty_table-Tuple{IO, TruthTable}","page":"Printing","title":"PrettyTables.pretty_table","text":"pretty_table(\n    ::Union{IO, Type{Union{String, Docs.HTML}}} = stdout, ::Union{Proposition, TruthTable};\n    formatters = formatter(PAndQ.NullaryOperator), kwargs...\n)\n\nSee also PrettyTables.pretty_table, Proposition, TruthTable, and formatter.\n\nExamples\n\njulia> pretty_table(@atomize p ∧ q)\n┌──────────┬──────────┬───────┐\n│        p │        q │ p ∧ q │\n│ Variable │ Variable │  Tree │\n├──────────┼──────────┼───────┤\n│        ⊤ │        ⊤ │     ⊤ │\n│        ⊥ │        ⊤ │     ⊥ │\n├──────────┼──────────┼───────┤\n│        ⊤ │        ⊥ │     ⊥ │\n│        ⊥ │        ⊥ │     ⊥ │\n└──────────┴──────────┴───────┘\n\njulia> print(pretty_table(Docs.HTML, @atomize p ∧ q).content)\n<table>\n  <thead>\n    <tr class = \"header\">\n      <th style = \"text-align: right;\">p</th>\n      <th style = \"text-align: right;\">q</th>\n      <th style = \"text-align: right;\">p ∧ q</th>\n    </tr>\n    <tr class = \"subheader headerLastRow\">\n      <th style = \"text-align: right;\">Variable</th>\n      <th style = \"text-align: right;\">Variable</th>\n      <th style = \"text-align: right;\">Tree</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td style = \"text-align: right;\">⊤</td>\n      <td style = \"text-align: right;\">⊤</td>\n      <td style = \"text-align: right;\">⊤</td>\n    </tr>\n    <tr>\n      <td style = \"text-align: right;\">⊥</td>\n      <td style = \"text-align: right;\">⊤</td>\n      <td style = \"text-align: right;\">⊥</td>\n    </tr>\n    <tr>\n      <td style = \"text-align: right;\">⊤</td>\n      <td style = \"text-align: right;\">⊥</td>\n      <td style = \"text-align: right;\">⊥</td>\n    </tr>\n    <tr>\n      <td style = \"text-align: right;\">⊥</td>\n      <td style = \"text-align: right;\">⊥</td>\n      <td style = \"text-align: right;\">⊥</td>\n    </tr>\n  </tbody>\n</table>\n\n\n\n\n\n","category":"method"},{"location":"manual/printing/#AbstractTrees.print_tree","page":"Printing","title":"AbstractTrees.print_tree","text":"print_tree(::IO = stdout, ::Proposition; kwargs...)\n\nPrints a tree diagram of the given Proposition.\n\nnote: Note\nInstances of Compound{typeof(identity)} are represented as I.\n\nSee also AbstractTrees.print_tree.\n\njulia> @atomize print_tree(p ∧ ¬q ⊻ s)\n⊻\n├─ ∧\n│  ├─ I\n│  │  └─ p\n│  └─ ¬\n│     └─ q\n└─ I\n   └─ s\n\njulia> @atomize print_tree(Normal(p ∧ ¬q ⊻ s))\n∧\n├─ ∨\n│  ├─ I\n│  │  └─ p\n│  └─ I\n│     └─ s\n├─ ∨\n│  ├─ ¬\n│  │  └─ q\n│  └─ I\n│     └─ s\n└─ ∨\n   ├─ ¬\n   │  └─ p\n   ├─ I\n   │  └─ q\n   └─ ¬\n      └─ s\n\n\n\n\n\n","category":"function"},{"location":"","page":"Home","title":"Home","text":"DocTestSetup = :(using PAndQ)","category":"page"},{"location":"#Home","page":"Home","title":"Home","text":"","category":"section"},{"location":"#Introduction","page":"Home","title":"Introduction","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"If you like propositional logic, then you've come to the right place!","category":"page"},{"location":"","page":"Home","title":"Home","text":"P∧Q has an intuitive interface that enables you to manipulate logical expressions symbolically. Propositions have multiple representations which can be easily converted and extended. Several utilities have been provided for convenience, visualization, and solving propositions.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"julia> using Pkg: add\n\njulia> add(\"PAndQ\")\n\njulia> using PAndQ","category":"page"},{"location":"#Showcase","page":"Home","title":"Showcase","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"julia> ¬⊥\ntautology (generic function with 1 method)\n\njulia> @variables p q\n2-element Vector{Variable}:\n p\n q\n\njulia> r = ¬p\n¬p\n\njulia> s = Clause(and, [p, ¬q])\np ∧ ¬q\n\njulia> @atomize t = ((q ∧ r) ↔ a)(a => ⊤)\nq ∧ ¬p\n\njulia> u = s ∨ t\n(p ∧ ¬q) ∨ (q ∧ ¬p)\n\njulia> TruthTable([p ∧ ¬p, r, p ⊻ q, u])\n┌────────┬──────────┬──────────┬─────────┬────────────────────────────┐\n│ p ∧ ¬p │ p        │ q        │ ¬p      │ p ⊻ q, (p ∧ ¬q) ∨ (q ∧ ¬p) │\n│ Tree   │ Variable │ Variable │ Literal │ Tree, Normal               │\n├────────┼──────────┼──────────┼─────────┼────────────────────────────┤\n│ ⊥      │ ⊤        │ ⊤        │ ⊥       │ ⊥                          │\n│ ⊥      │ ⊥        │ ⊤        │ ⊤       │ ⊤                          │\n├────────┼──────────┼──────────┼─────────┼────────────────────────────┤\n│ ⊥      │ ⊤        │ ⊥        │ ⊥       │ ⊤                          │\n│ ⊥      │ ⊥        │ ⊥        │ ⊤       │ ⊥                          │\n└────────┴──────────┴──────────┴─────────┴────────────────────────────┘","category":"page"},{"location":"#Related-Projects","page":"Home","title":"Related Projects","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"PAndQ.jl is currently best suited for learning and visualizing propositional logic. The user interface is well-documented and has numerous quality of life features that make it easy to create, manipulate, and query about propositions. Further, propositions can be converted, visualized, and output in several different forms.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Features such as a fast satisfiability algorithm, proofs, and other logics are still in development. In the meantime, check out the these excellent projects.","category":"page"},{"location":"#Top-Picks","page":"Home","title":"Top Picks","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Julog.jl\nLogicCircuits.jl\nSoleLogics.jl\nFirstOrderLogic.jl\nModalDecisionTrees.jl","category":"page"},{"location":"#Computer-Algebra-Systems","page":"Home","title":"Computer Algebra Systems","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Symbolics.jl\nMetatheory.jl\nRewrite.jl\nSimplify.jl\nSymbolicUtils.jl","category":"page"},{"location":"#Constraint-Solvers","page":"Home","title":"Constraint Solvers","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"ConstraintSolver.jl\nJuMP.jl","category":"page"},{"location":"#Wrappers","page":"Home","title":"Wrappers","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Chuffed.jl\nCPLEXCP.jl\nJaCoP.jl","category":"page"},{"location":"#Wrappers-2","page":"Home","title":"Wrappers","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Satifsiability.jl\nZ3.jl\nPicoSat.jl\nBeeEncoder.jl\nSatisfiabilityInterface.jl","category":"page"},{"location":"#Honorable-Mentions","page":"Home","title":"Honorable Mentions","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"TruthTables.jl\nSimpleSATSolver.jl\nPropositionalLogic.jl\nMathematicalPredicates.jl\ncombinators","category":"page"},{"location":"#Kanren","page":"Home","title":"Kanren","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"MuKanren.jl\nLilKanren.jl\nMiniKanren\nYet Another MicroKanren in Julia","category":"page"},{"location":"internals/#Internals","page":"Internals","title":"Internals","text":"","category":"section"},{"location":"internals/","page":"Internals","title":"Internals","text":"Everything that is not exported is considered internal.","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"PAndQ.union_typeof","category":"page"},{"location":"internals/#PAndQ.union_typeof","page":"Internals","title":"PAndQ.union_typeof","text":"union_typeof\n\n\n\n\n\n","category":"function"},{"location":"internals/#internals_operators","page":"Internals","title":"Operators","text":"","category":"section"},{"location":"internals/#Union-Types","page":"Internals","title":"Union Types","text":"","category":"section"},{"location":"internals/","page":"Internals","title":"Internals","text":"PAndQ.NullaryOperator\nPAndQ.UnaryOperator\nPAndQ.BinaryOperator\nPAndQ.LogicalOperator\nPAndQ.CommutativeOperator\nPAndQ.AssociativeOperator\nPAndQ.LeftNeutralOperator\nPAndQ.RightNeutralOperator\nPAndQ.AndOr","category":"page"},{"location":"internals/#PAndQ.NullaryOperator","page":"Internals","title":"PAndQ.NullaryOperator","text":"NullaryOperator\n\nThe Union of LogicalOperators that take zero arguments.\n\n\n\n\n\n","category":"type"},{"location":"internals/#PAndQ.UnaryOperator","page":"Internals","title":"PAndQ.UnaryOperator","text":"UnaryOperator\n\nThe Union of LogicalOperators that take one argument.\n\n\n\n\n\n","category":"type"},{"location":"internals/#PAndQ.BinaryOperator","page":"Internals","title":"PAndQ.BinaryOperator","text":"BinaryOperator\n\nThe Union of LogicalOperators that take two arguments.\n\n\n\n\n\n","category":"type"},{"location":"internals/#PAndQ.LogicalOperator","page":"Internals","title":"PAndQ.LogicalOperator","text":"LogicalOperator\n\nThe Union of logical operators.\n\n\n\n\n\n","category":"type"},{"location":"internals/#PAndQ.CommutativeOperator","page":"Internals","title":"PAndQ.CommutativeOperator","text":"CommutativeOperator\n\nThe Union of LogicalOperators with the commutative property.\n\n\n\n\n\n","category":"type"},{"location":"internals/#PAndQ.AssociativeOperator","page":"Internals","title":"PAndQ.AssociativeOperator","text":"AssociativeOperator\n\nThe Union of LogicalOperators with the associative property.\n\n\n\n\n\n","category":"type"},{"location":"internals/#PAndQ.LeftNeutralOperator","page":"Internals","title":"PAndQ.LeftNeutralOperator","text":"LeftNeutralOperator\n\nThe Union of LogicalOperators that have one or more left_neutrals.\n\n\n\n\n\n","category":"type"},{"location":"internals/#PAndQ.RightNeutralOperator","page":"Internals","title":"PAndQ.RightNeutralOperator","text":"RightNeutralOperator\n\nThe Union of LogicalOperators that have one or more right_neutrals.\n\n\n\n\n\n","category":"type"},{"location":"internals/#PAndQ.AndOr","page":"Internals","title":"PAndQ.AndOr","text":"AndOr\n\nThe Union of and and or.\n\n\n\n\n\n","category":"type"},{"location":"internals/#Propositions","page":"Internals","title":"Propositions","text":"","category":"section"},{"location":"internals/#Union-Types-2","page":"Internals","title":"Union Types","text":"","category":"section"},{"location":"internals/","page":"Internals","title":"Internals","text":"PAndQ.AtomicProposition\nPAndQ.LiteralProposition","category":"page"},{"location":"internals/#PAndQ.AtomicProposition","page":"Internals","title":"PAndQ.AtomicProposition","text":"AtomicProposition\n\nA Proposition that is known by its type to be logically equivalent to an Atom.\n\n\n\n\n\n","category":"type"},{"location":"internals/#PAndQ.LiteralProposition","page":"Internals","title":"PAndQ.LiteralProposition","text":"LiteralProposition\n\nA Proposition that is known by its type to be logically equivalent to a Literal.\n\n\n\n\n\n","category":"type"},{"location":"internals/#AbstractTrees.jl","page":"Internals","title":"AbstractTrees.jl","text":"","category":"section"},{"location":"internals/","page":"Internals","title":"Internals","text":"PAndQ.children\nPAndQ.nodevalue\nPAndQ.printnode","category":"page"},{"location":"internals/#AbstractTrees.children","page":"Internals","title":"AbstractTrees.children","text":"children(::Proposition)\n\nReturn an iterator over the child nodes of the given Proposition.\n\nExamples\n\njulia> @atomize PAndQ.children(p)\n()\n\njulia> @atomize PAndQ.children(¬p)\n(Variable(:p),)\n\njulia> @atomize PAndQ.children(p ∧ q)\n2-element Vector{Tree{typeof(identity), Variable}}:\n p\n q\n\n\n\n\n\n","category":"function"},{"location":"internals/#AbstractTrees.nodevalue","page":"Internals","title":"AbstractTrees.nodevalue","text":"nodevalue(::Compound)\n\nExamples\n\njulia> @atomize PAndQ.nodevalue(¬p)\nnot (generic function with 19 methods)\n\njulia> @atomize PAndQ.nodevalue(p ∧ q)\nand (generic function with 25 methods)\n\n\n\n\n\n","category":"function"},{"location":"internals/#AbstractTrees.printnode","page":"Internals","title":"AbstractTrees.printnode","text":"printnode(::IO, ::Proposition; kwargs...)\n\nSee also Proposition.\n\nExamples\n\njulia> @atomize PAndQ.printnode(stdout, p)\np\njulia> @atomize PAndQ.printnode(stdout, ¬p)\n¬\njulia> @atomize PAndQ.printnode(stdout, p ∧ q)\n∧\n\n\n\n\n\n","category":"function"},{"location":"internals/#Utility","page":"Internals","title":"Utility","text":"","category":"section"},{"location":"internals/","page":"Internals","title":"Internals","text":"PAndQ.child\nPAndQ.union_all_type\nPAndQ.symbol_value\nPAndQ.atomize","category":"page"},{"location":"internals/#PAndQ.child","page":"Internals","title":"PAndQ.child","text":"child(x)\n\nEquivalent to only(children(x))\n\n\n\n\n\n","category":"function"},{"location":"internals/#PAndQ.union_all_type","page":"Internals","title":"PAndQ.union_all_type","text":"union_all_type(::Proposition)\n\nReturn the UnionAll type of a Proposition.\n\nExamples\n\njulia> @atomize PAndQ.union_all_type(p)\nVariable\n\njulia> @atomize PAndQ.union_all_type(p ∧ q)\nTree\n\n\n\n\n\n","category":"function"},{"location":"internals/#PAndQ.symbol_value","page":"Internals","title":"PAndQ.symbol_value","text":"symbol_value\n\n\n\n\n\n","category":"function"},{"location":"internals/#PAndQ.atomize","page":"Internals","title":"PAndQ.atomize","text":"atomize(x)\n\nIf x is a symbol, return an expression that instantiates it as a Variable if it is undefined in the caller's scope. If isexpr(x, :$), return an expression that instantiates it as a Constant. If x is another expression, traverse it with recursive calls to atomize Otherise, return x.\n\n\n\n\n\n","category":"function"},{"location":"internals/#Printing","page":"Internals","title":"Printing","text":"","category":"section"},{"location":"internals/","page":"Internals","title":"Internals","text":"PAndQ.symbol_of\nPAndQ.merge_string\nPAndQ.parenthesize\nPAndQ.print_node\nPAndQ.show_atom","category":"page"},{"location":"internals/#PAndQ.symbol_of","page":"Internals","title":"PAndQ.symbol_of","text":"symbol_of(::LogicalOperator)\n\nReturn the Unicode character that is an alias for the given LogicalOperator.\n\nExamples\n\njulia> PAndQ.symbol_of(⊤)\n:⊤\n\njulia> PAndQ.symbol_of(¬)\n:¬\n\njulia> PAndQ.symbol_of(∧)\n:∧\n\n\n\n\n\n","category":"function"},{"location":"internals/#PAndQ.merge_string","page":"Internals","title":"PAndQ.merge_string","text":"merge_string(cell)\n\n\n\n\n\n","category":"function"},{"location":"internals/#PAndQ.parenthesize","page":"Internals","title":"PAndQ.parenthesize","text":"parenthesize(::IO, x)\n\n\n\n\n\n","category":"function"},{"location":"internals/#PAndQ.print_node","page":"Internals","title":"PAndQ.print_node","text":"print_node(io, p)\n\n\n\n\n\n","category":"function"},{"location":"internals/#PAndQ.show_atom","page":"Internals","title":"PAndQ.show_atom","text":"show_atom\n\n\n\n\n\n","category":"function"},{"location":"internals/#Semantics","page":"Internals","title":"Semantics","text":"","category":"section"},{"location":"internals/","page":"Internals","title":"Internals","text":"PAndQ.CallableObjectDocumentation\nPAndQ.neutral_operator\nPAndQ.eval_doubles","category":"page"},{"location":"internals/#PAndQ.CallableObjectDocumentation","page":"Internals","title":"PAndQ.CallableObjectDocumentation","text":"CallableObjectDocumentation\n\nA dummy type to attach a docstring to a callable object.\n\nSee also this Documenter.jl issue\n\n\n\n\n\n","category":"type"},{"location":"internals/#PAndQ.neutral_operator","page":"Internals","title":"PAndQ.neutral_operator","text":"neutral_operator(::NullaryOperator)\n\nReturn a subtype of AndOr that is the neutral element of the given NullaryOperator.\n\nSee also left_neutrals and right_neutrals.\n\nExamples\n\njulia> PAndQ.neutral_operator(⊤)\nand (generic function with 25 methods)\n\njulia> PAndQ.neutral_operator(⊥)\nor (generic function with 21 methods)\n\n\n\n\n\n","category":"function"},{"location":"internals/#PAndQ.eval_doubles","page":"Internals","title":"PAndQ.eval_doubles","text":"eval_doubles(f, doubles)\n\n\n\n\n\n","category":"function"},{"location":"extensions/#Extensions","page":"Extensions","title":"Extensions","text":"","category":"section"},{"location":"extensions/#Markdown","page":"Extensions","title":"Markdown","text":"","category":"section"},{"location":"extensions/","page":"Extensions","title":"Extensions","text":"pretty_table(::Type{Markdown.MD}, ::TruthTable)","category":"page"},{"location":"extensions/#PrettyTables.pretty_table-Tuple{Type{Markdown.MD}, TruthTable}","page":"Extensions","title":"PrettyTables.pretty_table","text":"pretty_table(\n    ::Type{Markdown.MD}, ::Union{Proposition, TruthTable};\n    formatters = string ∘ PAndQ.symbol_of, alignment = :l\n)\n\nExamples\n\njulia> @atomize pretty_table(Markdown.MD, p ∧ q)\n  p q p ∧ q\n  – – –––––\n  ⊤ ⊤ ⊤\n  ⊥ ⊤ ⊥\n  ⊤ ⊥ ⊥\n  ⊥ ⊥ ⊥\n\njulia> @atomize print(pretty_table(String, p ∧ q; backend = Val(:markdown)))\n| p   | q   | p ∧ q |\n|:--- |:--- |:----- |\n| ⊤   | ⊤   | ⊤     |\n| ⊥   | ⊤   | ⊥     |\n| ⊤   | ⊥   | ⊥     |\n| ⊥   | ⊥   | ⊥     |\n\n\n\n\n\n","category":"method"},{"location":"extensions/#Latexify","page":"Extensions","title":"Latexify","text":"","category":"section"},{"location":"extensions/","page":"Extensions","title":"Extensions","text":"tip: Tip\nA @latexrecipe has been defined for PAndQ.LogicalOperator, Proposition, and TruthTable.","category":"page"},{"location":"extensions/","page":"Extensions","title":"Extensions","text":"formatter(::Type{Latexify.LaTeXString})\npretty_table(::Type{Latexify.LaTeXString}, ::Union{Proposition, TruthTable})","category":"page"},{"location":"extensions/#PAndQ.formatter-Tuple{Type{LaTeXStrings.LaTeXString}}","page":"Extensions","title":"PAndQ.formatter","text":"formatter(t::Type{Latexify.LaTeXString})\n\nt formatter(t)(⊤, _, _) formatter(t)(⊥, _, _)\nLatexify.LaTeXString \"$\\top$\" \"$\\bot$\"\n\n\n\n\n\n","category":"method"},{"location":"extensions/#PrettyTables.pretty_table-Tuple{Type{LaTeXStrings.LaTeXString}, Union{Proposition, TruthTable}}","page":"Extensions","title":"PrettyTables.pretty_table","text":"pretty_table(\n    ::LaTexify.LaTexString, x::Union{Proposition, TruthTable};\n    backend = Val(:latex), kwargs...\n)\n\nEquivalent to LaTeXString(pretty_table(String, x; backend, kwargs...)).\n\nExamples\n\njulia> pretty_table(Latexify.LaTeXString, @atomize p ∧ q)\nL\"\\begin{tabular}{|r|r|r|}\n  \\hline\n  \\textbf{$p$} & \\textbf{$q$} & \\textbf{$p \\wedge q$} \\\\\n  \\texttt{Variable} & \\texttt{Variable} & \\texttt{Tree} \\\\\\hline\n  $\\top$ & $\\top$ & $\\top$ \\\\\n  $\\bot$ & $\\top$ & $\\bot$ \\\\\\hline\n  $\\top$ & $\\bot$ & $\\bot$ \\\\\n  $\\bot$ & $\\bot$ & $\\bot$ \\\\\\hline\n\\end{tabular}\n\"\n\n\n\n\n\n","category":"method"}]
}
